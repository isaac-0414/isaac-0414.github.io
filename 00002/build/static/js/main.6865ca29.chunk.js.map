{"version":3,"sources":["components/TopSpace/Options/OnOff/index.js","redux/actions.js","components/TopSpace/Options/Record/index.js","components/TopSpace/Options/Slider/index.js","components/TopSpace/Options/Micvisual/index.js","components/TopSpace/Options/index.js","components/TopSpace/index.js","components/Captions/Recognition/index.js","components/Captions/index.js","components/MiddleSpace/Loudness/AudioVisualiser.js","components/MiddleSpace/Loudness/AudioAnalyser.js","components/MiddleSpace/Loudness/index.js","components/DnD/Draggable/index.js","components/DnD/Droppable/index.js","components/MiddleSpace/index.js","components/DnD/DNDTest/index.js","App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["OnOff","props","dispatch","useDispatch","item","className","type","onChange","action","increment_textSize","decrement_textSize","increment_lineWidth","decrement_lineWidth","flip_invertColors","Record","setting","useSelector","state","recording","document","body","onkeyup","e","keyCode","onClick","Slider","decrement","increment","Micvisual","mic","result","text","Options","id","textSize","lineWidth","invertColors","TopSpace","shown","timeoutId","setTimeout","hide","bind","show","resetTimeout","this","setState","getElementById","addEventListener","removeEventListener","clearTimeout","toId","style","height","React","Component","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","Recognition","line","appendLine","start","stop","prevProps","prevState","isRecording","onresult","words","Array","from","results","map","transcript","join","charAt","toUpperCase","slice","isFinal","updateCurrentLine","onend","str","capts","isScrolledToBottom","scrollHeight","clientHeight","scrollTop","out","div","createElement","textContent","appendChild","PureComponent","Captions","paddingString","h","sz","fontSize","width","overflow","paddingLeft","paddingRight","AudioVisualiser","canvas","createRef","audioData","current","context","getContext","clearRect","drawLine","drawSpectrum","drawCircular","x","sliceWidth","length","beginPath","moveTo","y","lineTo","strokeStyle","iscolor","stroke","barHeight","barWidth","fillStyle","fillRect","avg","reduce","previous","i","rel","Math","cos","PI","sin","x_2","y_2","x_3","y_3","x_4","y_4","x_5","y_5","draw","ref","AudioAnalyser","Uint8Array","tick","audioContext","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","frequencyBinCount","source","createMediaStreamSource","audio","connect","rafId","requestAnimationFrame","getByteTimeDomainData","getByteFrequencyData","cancelAnimationFrame","disconnect","Index","stopMicrophone","getMicrophone","ismic","navigator","mediaDevices","getUserMedia","video","getTracks","forEach","track","Draggable","drag","dataTransfer","setData","target","noAllowDrop","stopPropagation","draggable","onDragStart","onDragOver","children","Droppable","drop","preventDefault","data","getData","allowDrop","onDrop","Wrapper","styled","MiddleSpace","color","margin","position","Item","droppableStyle","backgroundColor","App","getComputedStyle","documentElement","getPropertyValue","numLines","sizeString","botHeight","topHeight","bgColor","midHeight","Boolean","location","hostname","match","allReducers","combineReducers","max","min","lockScreen","store","createStore","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6865ca29.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.css'\r\nimport { /*useSelector, */useDispatch } from 'react-redux'\r\n\r\n// This code only works if the initial state is Off. It's surprisingly way harder\r\n// to get this to work if you want the inital state of the checkbox to be checked.\r\n\r\nexport default function OnOff(props) {\r\n     //const setting = useSelector(props.setting)\r\n     // useDispatch returns the state modifying function, invoked below.\r\n     const dispatch = useDispatch()\r\n\r\n     return (\r\n          <div>\r\n               {props.item}\r\n               <label className=\"switch\">\r\n                    <input type=\"checkbox\" onChange={() => dispatch(props.action())}></input>\r\n                    <span className=\"slider\"></span>\r\n               </label>\r\n          </div>\r\n     )\r\n}\r\n","// Actions are the functions that we call throughout the project to change global state.\r\n\r\nexport const set_screenWidth = (width) => {\r\n     return {\r\n          type: 'SET_SCREENWIDTH',\r\n          value: width\r\n     };\r\n}\r\n\r\nexport const set_screenHeight = (height) => {\r\n     return {\r\n          type: 'SET_SCREENHEIGHT',\r\n          value: height\r\n     };\r\n}\r\n\r\nexport const increment_textSize = () => {\r\n     return { type: 'INCREMENT_TEXTSIZE' };\r\n}\r\n\r\nexport const decrement_textSize = () => {\r\n     return { type: 'DECREMENT_TEXTSIZE' };\r\n}\r\n\r\nexport const increment_lineWidth = () => {\r\n     return { type: 'INCREMENT_LINEWIDTH' };\r\n}\r\n\r\nexport const decrement_lineWidth = () => {\r\n     return { type: 'DECREMENT_LINEWIDTH' };\r\n}\r\n\r\nexport const increment_numLines = () => {\r\n     return { type: 'INCREMENT_NUMLINES' };\r\n}\r\n\r\nexport const decrement_numLines = () => {\r\n     return { type: 'DECREMENT_NUMLINES' };\r\n}\r\n\r\nexport const flip_lockScreen = () => {\r\n     return { type: 'FLIP_LOCKSCREEN' };\r\n}\r\n\r\nexport const flip_invertColors = () => {\r\n     return { type: 'FLIP_INVERTCOLORS' };\r\n}\r\n\r\nexport const flip_recording = () => {\r\n     return { type: 'FLIP_RECORDING' };\r\n}\r\n\r\nexport const flip_micVisual = () => {\r\n     return { type: 'FLIP_MICVISUAL' };\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './index.css'\r\nimport { flip_recording } from '../../../../redux/actions'\r\n\r\nexport default function Record(props) {\r\n     const recording = (state) => state.recording\r\n     const setting = useSelector(recording) // Get current value of recording.\r\n     // useDispatch returns the state modifying function, invoked below.\r\n     const dispatch = useDispatch()\r\n\r\n     // flip recording when space bar is pressed\r\n     document.body.onkeyup = function(e) { // run function when any key is pressed\r\n          if (e.keyCode === 32) // keyCode 32 is the space bar\r\n               dispatch(flip_recording())\r\n     }\r\n     // record-btn-wrapper toggles between the two buttons using the TopSpace\r\n     // hidden/shown CSS.\r\n     return (\r\n          <div>\r\n               {setting ? \"Recording\" : \"Record\"}\r\n               <div className=\"record-btn-wrapper\">\r\n                    <div className={setting ? \"record-btn hidden\" : \"record-btn shown\"}\r\n                         onClick={() => dispatch(flip_recording())} />\r\n                    <div className={setting ? \"stop-btn shown\" : \"stop-btn hidden\"}\r\n                         onClick={() => dispatch(flip_recording())} />\r\n               </div>\r\n          </div>\r\n     )\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n// To do: turn this into a slider. https://www.w3schools.com/howto/howto_js_rangeslider.asp\r\n\r\nexport default function Slider(props) {\r\n     const setting = useSelector(props.setting)\r\n     const dispatch = useDispatch()\r\n     return (\r\n          <div>\r\n               {props.item}\r\n               <div className=\"setting-wrapper\">\r\n                    <button className=\"minus\"\r\n                      onClick={() => dispatch(props.decrement())}>-</button>\r\n                    <div className=\"setting\">{setting}</div>\r\n                    <button className=\"plus\"\r\n                      onClick={() => dispatch(props.increment())}>+</button>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './index.css'\nimport { flip_micVisual } from '../../../../redux/actions'\n\n// This code only works if the initial state is Off. It's surprisingly way harder\n// to get this to work if you want the inital state of the checkbox to be checked.\n\nexport default function Micvisual(props) {\n\n    const mic = (state) => state.mic\n    const setting = useSelector(mic) // Get current value of recording.\n    // useDispatch returns the state modifying function, invoked below.\n    const dispatch = useDispatch()\n    let result = \"\"\n    let text = \"\"\n\n    // flip recording when space bar is pressed\n\n     //const setting = useSelector(props.setting)\n     // useDispatch returns the state modifying function, invoked below.\n\n     if (setting == 0){\n         result = \"No Visualization\"\n         text = \"None\"\n     }else if (setting == 1){\n         result = \"Line Visualization\"\n         text = \"Line\"\n     }else if (setting == 2){\n         result = \"Spectrum Visualization\"\n         text = \"Spectrum\"\n     }else{\n         result = \"Circular Visualization\"\n         text = \"Circular\"\n     }\n\n     return (\n          <div>\n              {result}\n               <div className=\"audio_visual\">\n                    <button className=\"audio_plus\"\n                         onClick={() => dispatch(flip_micVisual())} >{text}</button>\n\n               </div>\n          </div>\n     )\n}\n\n","import React from 'react'\r\nimport OnOff from './OnOff'\r\nimport PlusMinus from './PlusMinus'\r\nimport Record from './Record'\r\nimport Slider from './Slider'\r\nimport Micvisual from './Micvisual'\r\nimport './index.css'\r\nimport {\r\n     flip_invertColors,\r\n     flip_micVisual,\r\n     increment_textSize,\r\n     decrement_textSize,\r\n     increment_lineWidth,\r\n     decrement_lineWidth,\r\n     increment_numLines,\r\n     decrement_numLines\r\n} from '../../../redux/actions'\r\n\r\nexport default function Options() {\r\n     // These are functions that take an object and return an element of the object.\r\n     // They are passed to useSelector, which feeds the global state object into them.\r\n     const textSize = (state) => state.textSize\r\n     const lineWidth = (state) => state.lineWidth\r\n     const numLines = (state) => state.numLines\r\n     const invertColors = (state) => state.invertColors\r\n     \r\n\r\n     return (\r\n          <div className=\"Options\" id=\"options-space\">\r\n               <h1>Options</h1>\r\n               <div className=\"item-wrapper\">\r\n                    <Slider item=\"Text size\" setting={textSize}\r\n                         increment={increment_textSize}\r\n                         decrement={decrement_textSize} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <Slider item=\"Line width\" setting={lineWidth}\r\n                         increment={increment_lineWidth}\r\n                         decrement={decrement_lineWidth} />\r\n               </div>\r\n               {/*<div className=\"item-wrapper\">*/}\r\n               {/*     <PlusMinus item=\"Number of lines\" setting={numLines}*/}\r\n               {/*          increment={increment_numLines}*/}\r\n               {/*          decrement={decrement_numLines} />*/}\r\n               {/*</div>*/}\r\n               <div className=\"item-wrapper\">\r\n                    <OnOff item=\"Invert colors\" setting={invertColors}\r\n                         action={flip_invertColors} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <Micvisual />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <Record />\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\nimport Options from './Options'\r\n\r\n// JavaScript functions used: setTimeout, clearTimeout, bind, getElementById,\r\n// addEventListener, removeEventListener\r\n// React functions used: constructor, setState, componentDidMount, render\r\nclass TopSpace extends React.Component {\r\n     // When options are shown:\r\n          // Clicking in the optionsSpace triggers show() then resetTimeout().\r\n          // Clicking in the hideSpace triggers hide().\r\n     // When options are not shown:\r\n          // Clicking anywhere in the outer div triggers show().\r\n     // Event listeners enforce these rules in outer and optionsSpace elements.\r\n     // hideSpace uses a simple onClick, which only works when the element is shown.\r\n\r\n     constructor(props) {\r\n          super(props)\r\n          this.state = {\r\n               shown: true, // Whether the options area is shown. Used in JSX.\r\n               // Set 15 second timeout and when it expires, run this.hide.\r\n               // Immediately store the returned id for later use.\r\n               timeoutId: setTimeout(this.hide.bind(this), 15000)\r\n          }\r\n          // Bind functions so we can use the keyword 'this' inside them.\r\n          this.hide = this.hide.bind(this)\r\n          this.show = this.show.bind(this)\r\n          this.resetTimeout = this.resetTimeout.bind(this)\r\n     }\r\n\r\n     hide() { // Hide the options area from view.\r\n          this.setState({ shown: false })\r\n          document.getElementById('outer').addEventListener('click', this.show)\r\n     }\r\n\r\n     show() { // Show the options area. If already shown, just reset timeout.\r\n          this.setState({ shown: true })\r\n          document.getElementById('outer').removeEventListener('click', this.show)\r\n          this.resetTimeout()\r\n     }\r\n\r\n     resetTimeout() { // Reset the 15 second timer for hiding the options.\r\n          clearTimeout(this.state.timeoutId) // Cancel the timeout set earlier.\r\n          var toId = setTimeout(this.hide, 15000) // Set a new 15 second timeout.\r\n          this.setState({timeoutId: toId}) // Store the id of the new timeout.\r\n     }\r\n     // The first time the component mounts, add an event listener to the options\r\n     // space, so whenever it's clicked, it shows.\r\n     componentDidMount() {\r\n          document.getElementById('optionsSpace').addEventListener('click', this.show)\r\n     }\r\n\r\n     render() {\r\n          var h = '32vh'; // I don't remember why I set the height like this.\r\n          // The Options component takes a function as a prop.\r\n          return (\r\n               <div className=\"TopSpace\" id=\"outer\" style={{ height: h }}>\r\n                    <div className={\"Container \" + (this.state.shown ? \"shown\" : \"hidden\")}>\r\n                         <div id=\"optionsSpace\">\r\n                              <Options resetTimeout={this.resetTimeout} />\r\n                         </div>\r\n                         <div id=\"hideSpace\" onClick={this.hide}>Hide</div>\r\n                    </div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default TopSpace;\r\n","import React from 'react'\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\nrecognition.lang = 'en-US'\r\nrecognition.continuous = false\r\nrecognition.interimResults = true\r\n\r\n// In this document, a 'line' is more like a sentence.\r\n// this.state.line is like a buffer of text held at the end of the page. When the line\r\n// is finished, the buffer is flushed: a new div is appended to the 'out' div and\r\n// this.state.line is reset for the next line.\r\n\r\nclass Recognition extends React.PureComponent {\r\n     constructor() {\r\n          super()\r\n          this.state = {\r\n               line: '',\r\n               //recording: true\r\n          }\r\n          this.appendLine = this.appendLine.bind(this)\r\n          this.start = this.start.bind(this)\r\n          this.stop = this.stop.bind(this)\r\n     }\r\n\r\n     componentDidMount() {\r\n          this.start()\r\n     }\r\n\r\n     // Global state 'recording' is passed as a prop. componentDidUpdate is invoked\r\n     // when props change, therefore also when 'recording' changes.\r\n     componentDidUpdate(prevProps, prevState) {\r\n          if (prevProps.isRecording === this.props.isRecording)\r\n               return\r\n          if (this.props.isRecording)\r\n               this.start()\r\n          else this.stop()\r\n     }\r\n\r\n     start() {\r\n          recognition.start()\r\n          // Map the complex recognition result object to a string. You can explore\r\n          // the full object with console.log(e).\r\n          recognition.onresult = (e) => {\r\n               let words = Array.from(e.results)\r\n                 .map(result => result[0])\r\n                 .map(result => result.transcript)\r\n                 .join('');\r\n               words = words.charAt(0).toUpperCase() + words.slice(1)\r\n               if (e.results[0].isFinal) // if line is final\r\n                    this.appendLine(words + '.') // flush buffer\r\n               else this.updateCurrentLine(words) // update state\r\n          }\r\n          // By default, recognition stops when it gets a final result.\r\n          recognition.onend = recognition.start // override this behavior\r\n     }\r\n\r\n     stop() {\r\n          recognition.onresult = () => {} // do nothing with results\r\n          recognition.onend = () => {} // don't restart when ending\r\n          recognition.stop()\r\n     }\r\n\r\n     updateCurrentLine(str) {\r\n          const capts = document.getElementById('captionsSpace')\r\n          var isScrolledToBottom = capts.scrollHeight - capts.clientHeight <= capts.scrollTop + 1\r\n          this.setState({ line: str })\r\n          if (isScrolledToBottom)\r\n               capts.scrollTop = capts.scrollHeight - capts.clientHeight\r\n     }\r\n\r\n     appendLine(str) {\r\n          const capts = document.getElementById('captionsSpace')\r\n          const out = document.getElementById('out')\r\n          var isScrolledToBottom = capts.scrollHeight - capts.clientHeight <= capts.scrollTop + 1\r\n          var div = document.createElement('div') // create new div\r\n          div.textContent = str // set new div's text to the updated current line\r\n          out.appendChild(div) // add the new div to the document inside 'out' element\r\n          this.setState({ line: '' }) // reset line\r\n          if (isScrolledToBottom)\r\n               capts.scrollTop = capts.scrollHeight - capts.clientHeight // scroll to bottom\r\n     }\r\n\r\n     render() {\r\n          // out holds all past lines. curr holds the current line.\r\n          return (\r\n               <div>\r\n                    <div id='out'></div>\r\n                    <div id='curr'>{this.state.line}</div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Recognition\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './index.css'\r\nimport Recognition from './Recognition'\r\n\r\nexport default function Captions(props) {\r\n     const lineWidth = useSelector((state) => state.lineWidth)\r\n     const recording = useSelector((state) => state.recording)\r\n     // Sloppy styling. Please change.\r\n     var paddingString = (11 - lineWidth) * 3 + 'vw'\r\n     var h = props.height\r\n     var sz = props.textSize\r\n     // var wid = \"calc(100vh - 2 * \" + paddingString + \")\"\r\n     // if(window.innerHeight > window.innerWidth) {\r\n     //   wid = \"calc(100vw - 2 * \" + paddingString + \")\"\r\n     // }\r\n     return ( <div className=\"captionsSpace\" id=\"captionsSpace\"\r\n          style={{\r\n            fontSize: sz,\r\n            height: h,\r\n            width: \"90vw\",\r\n            overflow: \"auto\",\r\n            paddingLeft: paddingString,\r\n            paddingRight: paddingString }}>\r\n               <Recognition isRecording={recording} />\r\n          </div> )\r\n}\r\n","import React, { Component } from 'react';\n\n\n\nclass AudioVisualiser extends Component {\n\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n  draw() {\n      const { audioData } = this.props;\n      const canvas = this.canvas.current;\n      const height = canvas.height;\n      const width = canvas.width;\n      const context = canvas.getContext('2d');\n      context.clearRect(0, 0, width, height);\n\n      if (this.props.mic == 1){ // Line visualization\n          this.drawLine(audioData,context,height,width);\n      }\n      else if (this.props.mic == 2){// Spectrum visualization\n          this.drawSpectrum(audioData,context,height,width);\n      }\n      else if (this.props.mic == 3){// Circular visualization\n          this.drawCircular(audioData,context,height,width);\n      }\n\n\n}\n\ndrawLine(audioData,context,height,width){\n       let x = 0;\n       const sliceWidth = (width * 1.0) / audioData.length;\n      context.lineWidth = 2;\n      context.beginPath();\n      context.moveTo(0, height / 2);\n      for (const item of audioData) {\n          const y = (item / 255.0) * height;\n          context.lineTo(x, y);\n          x += sliceWidth;\n      }\n      context.lineTo(x, height / 2);\n      context.strokeStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n      context.stroke();\n}\n\ndrawSpectrum(audioData,context,height,width){\n      let x = 0;\n      const barWidth = (width / audioData.length) * 2.5;\n      let barHeight;\n      for(const item of audioData) {\n          barHeight = item/2;\n          context.fillStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n          context.fillRect(x,height/2-barHeight/2,barWidth,barHeight);\n          x += barWidth + 1;\n          }\n\n}\n\ndrawCircular(audioData,context,height,width){\n      const RADIUS = 80;\n      const POINTS = 360;\n      let sum = audioData.reduce((previous, current) => current += previous);\n      let avg = sum / audioData.length;\n\n      for(let i = 0; i < POINTS; i++) {\n          let rel = ~~(i * (POINTS/audioData.length));\n          let x = width/2 + RADIUS * Math.cos( (i * 2 * Math.PI) / POINTS );\n          let y = height/2 + RADIUS * -Math.sin( (i * 2 * Math.PI) / POINTS );\n          let x_2 = x + (audioData[rel]/4) * Math.cos( (i * 2 * Math.PI) / POINTS );\n          let y_2 = y + (audioData[rel]/4) * -Math.sin( (i * 2 * Math.PI) / POINTS );\n          let x_3 = width/2 + 1 *  avg * Math.cos((i * 2 * Math.PI) / POINTS );\n          let y_3 = height/2 + 1 * avg * -Math.sin((i * 2 * Math.PI) / POINTS );\n          let x_4 = x_3 - 0.5 *  avg * Math.cos((i * 2 * Math.PI) / POINTS );\n          let y_4 = y_3 - 0.5 * avg * -Math.sin((i * 2 * Math.PI) / POINTS );\n          let x_5 = x - 0.3  * Math.cos((i * 2 * Math.PI) / POINTS );\n          let y_5 = y - 0.3  * -Math.sin((i * 2 * Math.PI) / POINTS);\n          //draw the circular spectrum\n          context.beginPath();\n          context.moveTo(x, y);\n          context.lineTo(x_2, y_2);\n          context.strokeStyle = this.props.iscolor ? '#000000' : '#F8F8FF';\n          context.stroke();\n          //draw the margin circle\n          context.beginPath();\n          context.moveTo(x,y);\n          context.lineTo(x_5,y_5);\n          context.stroke();\n          //draw the inner circlew\n          context.beginPath();\n          context.moveTo(x_4,y_4);\n          context.lineTo(x_3,y_3);\n          if(y_4 - y_3 > 10){\n              context.strokeStyle = '#ff0000';\n          }\n          context.stroke();\n          }\n\n}\ncomponentDidUpdate() {\n    this.draw();\n  }\n\n  render() {\n      let width = \"1700vw\"\n      if (this.props.mic == 1){\n          width = \"1800vw\"\n      }else if (this.props.mic == 2){\n          width = \"1600vw\"\n      }else if (this.props.mic == 3){\n          width = \"800vw\"\n      }\n\n    return <canvas width={width} height=\"300vh\" ref={this.canvas} />;\n  }\n\n}\n\nexport default AudioVisualiser;\n","import React, {Component } from 'react';\nimport AudioVisualiser from './AudioVisualiser'\n\n\n/*global Unit8Array*/\n\n\nclass AudioAnalyser extends Component {\n\n     constructor(props) {\n          super(props);\n          this.state = {\n                audioData : new Uint8Array(0)\n          };\n          this.tick = this.tick.bind(this);\n     }\n\n     componentDidMount() {\n     this.audioContext = new (window.AudioContext ||\n       window.webkitAudioContext)();\n     this.analyser = this.audioContext.createAnalyser();\n     this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n     this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n     this.source.connect(this.analyser);\n     this.rafId = requestAnimationFrame(this.tick);\n   }\n\n     tick() {\n         if (this.props.mic == 1){\n             //console.log(\"1\");n\n             this.analyser.getByteTimeDomainData(this.dataArray);\n         }else if (this.props.mic == 2){\n             //console.log(\"2\");\n             this.analyser.getByteFrequencyData(this.dataArray);\n         }else if (this.props.mic == 3){\n             this.analyser.getByteFrequencyData(this.dataArray);\n             //this.analyser.getByteTimeDomainData(this.dataArray);\n         }\n     this.setState({ audioData: this.dataArray });\n     this.rafId = requestAnimationFrame(this.tick);\n   }\n\n   componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  render() {\n      return <AudioVisualiser audioData={this.state.audioData} iscolor = {this.props.iscolor} mic = {this.props.mic}/>;\n    }\n\n\n}\n\nexport default AudioAnalyser;\n","import React from 'react';\nimport AudioAnalyser from './AudioAnalyser';\n\n\nclass Index extends React.PureComponent {\n  constructor() {\n   super()\n   this.state = {\n     audio: null\n   };\n\n  //this.toggleMicrophone = this.toggleMicrophone.bind(this);\n  this.stopMicrophone = this.stopMicrophone.bind(this);\n  this.getMicrophone = this.getMicrophone.bind(this);\n }\n\n\n\n componentDidUpdate(prevProps,prevState) {\n   if(prevProps.ismic === this.props.ismic)\n      return\n   if(this.props.ismic > 0){\n      this.getMicrophone()\n    }\n   else this.stopMicrophone()\n }\n\n async getMicrophone() {\n    const audio = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: false\n    });\n    this.setState({ audio });\n  }\n\n  stopMicrophone() {\n     this.state.audio.getTracks().forEach(track => track.stop());\n     this.setState({ audio: null });\n   }\n\n\n  render() {\n     return (\n\n         <div className=\"controls\" >\n           {this.state.audio ? <AudioAnalyser audio={this.state.audio}  iscolor = {this.props.iscolor}  mic = {this.props.ismic}/> : ''}\n         </div>\n\n     );\n   }\n}\n\nexport default Index;\n\n// <button onClick={this.toggleMicrophone} style = {{\n//   position:\"fixed\",\n//   top:\"35vh\",\n//   left:\"65vw\",\n//   width:\"10vw\",\n//   height:\"10vh\",\n//   fontSize: \"1.5vw\",\n//   textAlign: \"left\"\n// }}>\n//   {this.state.audio ? 'Stop MIC' : 'Get MIC input'}\n// </button>\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Draggable extends React.Component{\n\n    drag = (e) => {\n        e.dataTransfer.setData('transfer',e.target.id);\n    }\n\n    noAllowDrop = (e) => {\n        e.stopPropagation();\n    }\n\n    render(){\n        return (\n            <div id= {this.props.id} draggable = \"true\" onDragStart={this.drag} \n            onDragOver= {this.noAllowDrop} style = {this.props.style}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nDraggable.propTypes = {\n    id : PropTypes.string,\n    style: PropTypes.object,\n    children: PropTypes.node,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Droppable extends React.Component{\n    drop = (e) =>{\n        e.preventDefault();\n        const data = e.dataTransfer.getData('transfer');\n        e.target.appendChild(document.getElementById(data));\n    }\n\n    allowDrop = (e) =>{\n        e.preventDefault();\n    }\n\n    render(){\n        return (\n            <div id = {this.props.id} onDrop = {this.drop} onDragOver = {this.allowDrop} style = {this.props.style}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nDroppable.propTypes = {\n    id : PropTypes.string,\n    style: PropTypes.object,\n    children: PropTypes.node,\n}","import React from 'react'\nimport Index from './Loudness/index'\nimport './index.css'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\nimport Draggable from '../DnD/Draggable'\nimport Droppable from '../DnD/Droppable'\nimport './index.css'\n\n\nconst Wrapper = styled.div`\n    width:100%;\n    padding:32px;\n    display:flex;\n    justify-content: center;\n`;\n\n\nconst droppableStyle = {\n    backgroundColor: '#555',\n    width:'50vw',\n    height: '32vh',\n    margin: '1px'\n};\n \nexport default function MiddleSpace(props) {\n  var h = props.height\n  const mic = useSelector((state) => state.mic)\n  const color = useSelector((state) => state.invertColors)\n //  var wid = \"calc(100vh - 2 * \" + paddingString + \")\"\n //  if(window.innerHeight > window.innerWidth) {\n //    wid = \"calc(100vw - 2 * \" + paddingString + \")\"\n //  }\n\n  if (props.color == 'black'){\n      return ( <div className=\"MiddleSpace\">    \n            <Wrapper>\n                  <Droppable className = \"d1\" id = \"dr1\" style = {{\n                    width:'50vw',\n                    height: '34vh',\n                    margin: '1px'}}>\n                    <div className = \"show1\">\n                      <Draggable id = \"item1\" style = {{margin:'8px'}}>\n                        \n                          <Index ismic = {mic} iscolor = {color} style={{\n                          position:\"relative\",\n                          }}/> \n                       \n                      </Draggable>\n                      </div>\n                  </Droppable>\n                  <Droppable className = \"d1\" id = \"dr2\" style = {{\n                    width:'50vw',\n                    height: '34vh',\n                    margin: '1px'}}>\n                      <div className = \"show1\"></div>\n                  </Droppable>\n              </Wrapper>\n          </div> )\n  }else{\n    return ( <div className=\"MiddleSpace\">    \n            <Wrapper>\n                  <Droppable className = \"d2\" id = \"dr1\" style = {{\n                    width:'50vw',\n                    height: '34vh',\n                    margin: '1px'}}>\n                      <Draggable id = \"item1\" style = {{margin:'8px'}}><Index ismic = {mic} iscolor = {color} style={{\n                        position:\"relative\",\n                      }}/> \n                    </Draggable>\n                      \n                  </Droppable>\n                  <Droppable className = \"d2\" id = \"dr2\" style = {{\n                    width:'50vw',\n                    height: '34vh',\n                    margin: '1px'}}>\n                  </Droppable>\n              </Wrapper>\n          </div> )\n  }\n}\n","import React from 'react';\nimport styled from 'styled-components'\nimport Draggable from '../Draggable'\nimport Droppable from '../Droppable'\n\nconst Wrapper = styled.div`\n    width:100%;\n    padding:32px;\n    display:flex;\n    justify-content: center;\n`;\n\nconst Item = styled.div`\n    padding:8px;\n    color:#555;\n    background-color: white;\n    border-radius:3px;\n`;\n\nconst droppableStyle = {\n    backgroundColor: '#555',\n    width:'250px',\n    height: '400px',\n    margin: '32px'\n};\n\nexport default class DNDTest extends React.Component{\n    render(){\n        return (\n            <Wrapper>\n                <Droppable id = \"dr1\" style = {droppableStyle}>\n                    <Draggable id = \"item1\" style = {{margin:'8px'}}><Item>Some text</Item></Draggable>\n                    <Draggable id = \"item2\" style = {{margin:'8px'}}><Item>Some other text</Item></Draggable>\n                </Droppable>\n                <Droppable id = \"dr2\" style = {droppableStyle}>\n                   \n                </Droppable>\n            </Wrapper>\n        )\n    }\n}","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport TopSpace from './components/TopSpace'\nimport Captions from './components/Captions'\nimport MiddleSpace from './components/MiddleSpace'\nimport DNDTest from './components/DnD/DNDTest'\nimport './App.css'\n\nexport default function App() {\n     const darkMode = getComputedStyle(document.documentElement).getPropertyValue('--primary'); // #999999\n     // Get global state from Redux. See the React Redux tutorial.\n     const textSize = useSelector((state) => state.textSize)\n     const numLines = useSelector((state) => state.numLines)\n     const invertColors = useSelector((state) => state.invertColors)\n     // Convert variables to CSS-friendly strings.\n     var sizeString = textSize + 'vh'\n     // Size of bottom space (text area) relative to text size and number of lines.\n     // 1.5 is an estimate of the ratio of line size to text size.\n     // This is a sloppy way of calculating the height. Please improve on this.\n     var botHeight = 36\n     // topHeight + botHeight should always = 100vh because we don't want the full\n     // page to scroll (we only want the individual areas to scroll).\n\n     var midHeight = 32\n     var topHeight = 100 - botHeight + 'vh'\n     midHeight += 'vh'\n     botHeight += 'vh'\n     // botHeight += 'vh'\n     var bgColor = invertColors ? 'white': 'black'\n     var color = invertColors ? 'black' : 'white'\n     if (bgColor == 'black') {\n       return (\n            <div className=\"App-1\" style={{\n                 backgroundColor: 'black',\n                 color: 'white'\n                }}>\n                 <TopSpace height={topHeight} />\n                 <MiddleSpace height={midHeight} color = {bgColor}/>\n                 <Captions height={botHeight} textSize={sizeString} />\n                 {/* <DNDTest /> */}\n            </div>\n       )\n     } else {\n       return (\n            <div className=\"App-2\" style={{\n                 backgroundColor: 'white',\n                 color: 'black'\n                }}>\n                 <TopSpace height={topHeight} />\n                 <MiddleSpace height={midHeight} color = {bgColor}/>\n                 <Captions height={botHeight} textSize={sizeString} />\n                 {/* <DNDTest /> */}\n            </div>\n       )\n     }\n     // You can't comment in JSX.\n     // The style tag is the easiest way to set style based on JS variables.\n\n}\n","// THIS ENTIRE FILE, INCLUDING COMMENTS EXCEPT FOR THIS ONE, IS AUTOMATICALLY PROVIDED BY NPX\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nconst textSizeReducer = (state = 6, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_TEXTSIZE':\r\n               return state + 1;\r\n          case 'DECREMENT_TEXTSIZE':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lineWidthReducer = (state = 10, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_LINEWIDTH':\r\n               return Math.min(10, state + 1)\r\n          case 'DECREMENT_LINEWIDTH':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst numLinesReducer = (state = 4, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_NUMLINES':\r\n               return state + 1;\r\n          case 'DECREMENT_NUMLINES':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lockScreenReducer = (state = false, action) => {\r\n     if (action.type === 'FLIP_LOCKSCREEN')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst invertMicVisualReducer = (state = 0, action) => {\r\n  if (action.type === 'FLIP_MICVISUAL'){\r\n       state = state + 1;\r\n       if (state == 4) {\r\n            state = 0;\r\n       }\r\n  }\r\n  return state;\r\n}\r\n\r\nconst invertColorsReducer = (state = false, action) => {\r\n     if (action.type === 'FLIP_INVERTCOLORS')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst recordingReducer = (state = true, action) => {\r\n     if (action.type === 'FLIP_RECORDING')\r\n          return !state\r\n     else return state\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n     textSize: textSizeReducer,\r\n     lineWidth: lineWidthReducer,\r\n     numLines: numLinesReducer,\r\n     lockScreen: lockScreenReducer,\r\n     invertColors: invertColorsReducer,\r\n     recording: recordingReducer,\r\n     mic: invertMicVisualReducer\r\n});\r\n\r\nexport default allReducers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport allReducers from './redux/reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n     <Provider store={store}>\n          <App />\n     </Provider>,\n     document.getElementById('root')\n);\n\n// AUTOMATIC COMMENT PROVIDED BY NPX:\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}