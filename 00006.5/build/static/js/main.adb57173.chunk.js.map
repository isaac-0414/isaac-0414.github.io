{"version":3,"sources":["components/sidebar/STT/listening.tsx","components/sidebar/display/textSize.tsx","components/sidebar/STT/speechLanguage.tsx","components/sidebar/STT/textLanguage.tsx","components/sidebar/sidebar.tsx","components/api/azure/AzureDropdown.tsx","components/api/pickApi.tsx","components/api/azure/azureRecognition.tsx","components/topbar/ApiDropdown.tsx","components/topbar/topbar.tsx","components/api/webspeech/recognition.tsx","components/api/recogComponent.tsx","mode/desktop/Desktop.tsx","App.tsx","redux/reducers/displayReducers.tsx","redux/reducers/apiReducers.tsx","redux/reducers/controlReducers.tsx","store.tsx","reportWebVitals.ts","index.tsx"],"names":["CustomizedMenus","props","dispatch","useDispatch","controlStatus","useSelector","state","ControlReducer","Button","id","variant","disableElevation","onClick","event","listening","type","payload","sx","width","height","useStyles","makeStyles","slider","marginLeft","textBox","valuetext","value","PlusMinus","textS","DisplayReducer","classes","className","Typography","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","defaultValue","textSize","getAriaValueText","aria-labelledby","valueLabelDisplay","onChange","e","val","copyStatus","Object","assign","handleInputChangeSlider","step","marks","min","max","Input","margin","Number","target","onBlur","inputProps","languages","StyledMenu","styled","Menu","elevation","anchorOrigin","vertical","horizontal","transformOrigin","theme","borderRadius","marginTop","color","palette","mode","grey","fontSize","text","secondary","marginRight","innerHeight","outerHeight","backgroundColor","alpha","primary","main","action","selectedOpacity","control","React","anchorEl","setAnchorEl","language","speechLanguage","setState","open","Boolean","handleClickItem","aria-controls","aria-haspopup","aria-expanded","undefined","currentTarget","padding","style","MenuListProps","onClose","map","index","MenuItem","disableRipple","textLanguages","textLanguage","STT","display","stt","visualization","toggleDrawer","head","List","bgcolor","component","ListItem","ListItemIcon","ListItemText","IconButton","Collapse","in","timeout","unmountOnExit","disablePadding","pl","mb","isRecording","Divider","pt","STATUS","AzureDropdown","pog","test","useCallback","azureStatus","a","Promise","resolve","reject","azureSpeech","speechSDK","fromSubscription","azureKey","azureRegion","speechRecognitionLanguage","addTargetLanguage","azureAudioConfig","fromDefaultMicrophoneInput","reco","canceled","sessionStarted","recognizeOnceAsync","useMemo","GetAzureRecognition","openAzure","AzureReducer","apiStatus","handleChangeKey","toggleEnter","then","response","localStorage","setItem","JSON","stringify","swal","title","icon","timer","buttons","no","currentAPI","Box","pr","noValidate","autoComplete","TextField","label","mr","currTheme","createTheme","success","warning","error","IconStatus","myTheme","NULL","ThemeProvider","AVAILABLE","UNAVAILABLE","streamTextStatus","webspeechStatus","APIStatusReducer","apiStat","api","isArrow","apiName","ListItemButton","streamtextStatus","AccountMenu","textAlign","Tooltip","size","ml","PaperProps","overflow","filter","mt","boxSizing","content","position","top","right","transform","zIndex","TemporaryDrawer","isOpen","AppBar","Toolbar","Drawer","getSpeechRecognition","window","webkitSpeechRecognition","Error","speechRecognition","continuous","interimResults","transcriptsFull","desiredAPI","WebRecognitionExample","webspeechHandler","azureHandler","document","addEventListener","Swal","fire","allowOutsideClick","showDenyButton","confirmButtonText","result","isConfirmed","textSizeA","transcript","azureTranscripts","setTranscripts","azureListen","lastStartedAt","Date","getTime","current","setProfanity","lastRecognized","startContinuousRecognitionAsync","recognizing","s","stopContinuousRecognitionAsync","translations","get","recognized","sessionStopped","timeSinceStart","AzureRecognition","finalTranscript","transcripts","listen","onresult","stop","finalResult","Array","from","results","join","onend","start","useRecognition","stateRefControl","stateRefAzure","stateCurrentAPI","fullTranscripts","capts","getElementById","scrollHeight","clientHeight","scrollTop","left","paddingLeft","paddingRight","overflowY","Desktop","console","log","App","COLOR","APIS","initialState","BLACK","saveLocally","varName","getLocalState","name","checkNull","getItem","parse","initialAPIStatusState","WEBSPEECH","initialAzureState","initialStreamtextState","key","initialControlState","rootReducer","combineReducers","StreamtextReducer","store","createStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.adb57173.chunk.js","sourcesContent":["import PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport { RootState } from '../../../store';\r\nimport PauseIcon from '@mui/icons-material/Pause';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ControlStatus } from '../../../redux/types';\r\nimport * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\n\r\n   export default function CustomizedMenus(props) {\r\n     const dispatch = useDispatch()\r\n     let controlStatus = useSelector((state: RootState) => {\r\n          return state.ControlReducer as ControlStatus;\r\n     });\r\n\r\n     const toggleDrawer = (event: React.KeyboardEvent | React.MouseEvent) => {\r\n          controlStatus.listening = !controlStatus.listening\r\n          dispatch({type: 'FLIP_RECORDING', payload: controlStatus})\r\n     }\r\n     return (\r\n       <div>\r\n         <Button\r\n           id=\"demo-customized-button\"\r\n           variant=\"contained\"\r\n           disableElevation\r\n           onClick={toggleDrawer}\r\n           sx={{ width: 50, height:30}}\r\n         >\r\n          {controlStatus.listening === false ? <PlayArrowIcon /> : <PauseIcon />}\r\n         </Button>\r\n       </div>\r\n     );\r\n   }\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Input from '@material-ui/core/Input';\r\nimport { RootState, DisplayStatus } from '../../../redux/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst useStyles = makeStyles({\r\n  slider: {\r\n    width: '16vw',\r\n    marginLeft: '2vw',\r\n  },\r\n  textBox: {\r\n    width: '2.5vw',\r\n    marginLeft: '1vw'\r\n  }\r\n});\r\n\r\nfunction valuetext(value) {\r\n  return `${value}`;\r\n}\r\nexport default function PlusMinus(props) {\r\n  const dispatch = useDispatch()\r\n  const textS = useSelector((state: RootState) => {\r\n    return state.DisplayReducer as DisplayStatus;\r\n  });\r\n  const classes = useStyles();\r\n\r\n  const handleInputChangeInput = (event) => {\r\n    let copyStatus = Object.assign({}, textS);\r\n    copyStatus.textSize = Number(event.target.value)\r\n    dispatch({type: 'SET_TEXT', payload: copyStatus})\r\n  }\r\n  const handleInputChangeSlider = (event) => {\r\n    let copyStatus = Object.assign({}, textS);\r\n    copyStatus.textSize = event\r\n    dispatch({type: 'SET_TEXT', payload: copyStatus})\r\n\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    let copyStatus = Object.assign({}, textS);\r\n    if (textS.textSize < 1) {\r\n      copyStatus.textSize = 1\r\n    } else if (textS.textSize > 15) {\r\n      copyStatus.textSize = 1\r\n    }\r\n    dispatch({type: 'SET_TEXT', payload: copyStatus})\r\n\r\n  };\r\n\r\n  return (\r\n    <div className={classes.slider}>\r\n      <Typography id=\"discrete-slider\" gutterBottom>\r\n      </Typography>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs>\r\n          <Slider\r\n            defaultValue={textS.textSize}\r\n            getAriaValueText={valuetext}\r\n            aria-labelledby=\"discrete-slider\"\r\n            valueLabelDisplay=\"auto\"\r\n            onChange={(e, val) => { handleInputChangeSlider(val) }}\r\n            step={1}\r\n            marks\r\n            min={1}\r\n            max={15}\r\n          />\r\n        </Grid>\r\n        <div className={classes.textBox}>\r\n        <Grid item>\r\n\r\n          <Input\r\n            value={textS.textSize}\r\n            margin=\"dense\"\r\n            onChange={handleInputChangeInput}\r\n            onBlur={handleBlur}\r\n            inputProps={{\r\n              step: 1,\r\n              min: 1,\r\n              max: 15,\r\n              type: 'number',\r\n              'aria-labelledby': 'input-slider',\r\n            }}\r\n          />\r\n        </Grid>\r\n        </div>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}","import * as React from 'react';\r\nimport { styled, alpha } from '@mui/material/styles';\r\nimport Button from '@mui/material/Button';\r\nimport { RootState, ControlStatus } from '../../../redux/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Menu, { MenuProps } from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n/* todo:\r\n  1   Make language bar a fixed height so that it can only display ~8 languages \r\n      and not take up the whole screen\r\n  2   Change language lists to a 2d array that so we can display the countries name\r\n      and save the shortened title in RootState\r\n*/\r\nconst languages = [\r\n  \"ar-EG\",\r\n  \"ca-ES\",\r\n  \"da-DK\",\r\n  \"da-DK\",\r\n  \"de-DE\",\r\n  \"en-AU\",\r\n  \"en-CA\",\r\n  \"en-GB\",\r\n  \"en-IN\",\r\n  \"en-NZ\",\r\n  \"en-US\",\r\n  \"es-ES\",\r\n  \"es-MX\",\r\n  \"fi-FI\",\r\n  \"fr-CA\",\r\n  \"fr-FR\",\r\n  \"hi-IN\",\r\n  \"it-IT\",\r\n  \"ja-JP\",\r\n  \"ko-KR\",\r\n  \"nb-NO\",\r\n  \"nl-NL\",\r\n  \"pl-PL\",\r\n  \"pt-BR\",\r\n  \"pt-PT\",\r\n  \"ru-RU\",\r\n  \"sv-SE\",\r\n  \"zh-CN\",\r\n  \"zh-HK\",\r\n  \"zh-TW\",]\r\n\r\n  const textLanguages = [\r\n    \"ar\",\r\n    \"da\",\r\n    \"de\",\r\n    \"en\",\r\n    \"es\",\r\n    \"fi\",\r\n    \"fr\",\r\n    \"hi\",\r\n    \"it\",\r\n    \"ja\",\r\n    \"ko\",\r\n    \"nb\",\r\n    \"nl\",\r\n    \"pl\",\r\n    \"pt\",\r\n    \"ru\",\r\n    \"sv\",\r\n    \"zh\",]\r\n\r\nconst StyledMenu = styled((props: MenuProps) => (\r\n  <Menu\r\n    elevation={0}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'right',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'right',\r\n    }}\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  '& .MuiPaper-root': {\r\n    borderRadius: 6,\r\n    marginTop: theme.spacing(1),\r\n    color:\r\n      theme.palette.mode === 'light' ? 'rgb(55, 65, 81)' : theme.palette.grey[300],\r\n\r\n    '& .MuiMenuItem-root': {\r\n      '& .MuiSvgIcon-root': {\r\n        fontSize: 10,\r\n        color: theme.palette.text.secondary,\r\n        marginRight: theme.spacing(1.5),\r\n        innerHeight: 40,\r\n        outerHeight: 40,\r\n      },\r\n      '&:active': {\r\n        backgroundColor: alpha(\r\n          theme.palette.primary.main,\r\n          theme.palette.action.selectedOpacity,\r\n        ),\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function CustomizedMenus() {\r\n  const dispatch = useDispatch();\r\n  const control = useSelector((state: RootState) => {\r\n    return state.ControlReducer as ControlStatus;\r\n  });\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const [state, setState] = React.useState({\r\n    language: control.speechLanguage,\r\n  });\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n\r\n  };\r\n  const handleClickItem = (event) => {\r\n    setState({ ...state, language: event.target.id })\r\n    dispatch({type: 'SET_SPEECH_LANGUAGE', payload: event.target.id})\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        id=\"demo-customized-button\"\r\n        aria-controls=\"demo-customized-menu\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? 'true' : undefined}\r\n        variant=\"contained\"\r\n        disableElevation\r\n        onClick={handleClick}  \r\n        sx={{ width: '2vw', height:30, padding: 0}}\r\n      >\r\n          \r\n        <h2 className=\"tryout\" style={{fontSize: '12px'}}>{state.language}</h2> \r\n        </Button>\r\n      <StyledMenu\r\n        id=\"demo-customized-menu\"\r\n        MenuListProps={{\r\n          'aria-labelledby': 'demo-customized-button',\r\n        }}\r\n        anchorEl={anchorEl}\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n          {languages.map((language : string, index) =>\r\n            <MenuItem id = {language} onClick={handleClickItem} disableRipple>\r\n                {language}\r\n            </MenuItem>\r\n          )}          \r\n      </StyledMenu>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { styled, alpha } from '@mui/material/styles';\r\nimport Button from '@mui/material/Button';\r\nimport { RootState, ControlStatus } from '../../../redux/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Menu, { MenuProps } from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n/* todo:\r\n  1   Make language bar a fixed height so that it can only display ~8 languages \r\n      and not take up the whole screen\r\n  2   Change language lists to a 2d array that so we can display the countries name\r\n      and save the shortened title in RootState\r\n*/\r\n\r\n  const textLanguages = [\r\n    \"ar\",\r\n    \"da\",\r\n    \"de\",\r\n    \"en\",\r\n    \"es\",\r\n    \"fi\",\r\n    \"fr\",\r\n    \"hi\",\r\n    \"it\",\r\n    \"ja\",\r\n    \"ko\",\r\n    \"nb\",\r\n    \"nl\",\r\n    \"pl\",\r\n    \"pt\",\r\n    \"ru\",\r\n    \"sv\",\r\n    \"zh\",]\r\n\r\nconst StyledMenu = styled((props: MenuProps) => (\r\n  <Menu\r\n    elevation={0}\r\n    anchorOrigin={{\r\n      vertical: 'bottom',\r\n      horizontal: 'right',\r\n    }}\r\n    transformOrigin={{\r\n      vertical: 'top',\r\n      horizontal: 'right',\r\n    }}\r\n    {...props}\r\n  />\r\n))(({ theme }) => ({\r\n  '& .MuiPaper-root': {\r\n    borderRadius: 6,\r\n    marginTop: theme.spacing(1),\r\n    color:\r\n      theme.palette.mode === 'light' ? 'rgb(55, 65, 81)' : theme.palette.grey[300],\r\n\r\n    '& .MuiMenuItem-root': {\r\n      '& .MuiSvgIcon-root': {\r\n        fontSize: 10,\r\n        color: theme.palette.text.secondary,\r\n        marginRight: theme.spacing(1.5),\r\n        innerHeight: 40,\r\n        outerHeight: 40,\r\n      },\r\n      '&:active': {\r\n        backgroundColor: alpha(\r\n          theme.palette.primary.main,\r\n          theme.palette.action.selectedOpacity,\r\n        ),\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function CustomizedMenus() {\r\n  const dispatch = useDispatch();\r\n  const control = useSelector((state: RootState) => {\r\n    return state.ControlReducer as ControlStatus;\r\n  });\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const [state, setState] = React.useState({\r\n    language: control.textLanguage,\r\n  });\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n\r\n  };\r\n  const handleClickItem = (event) => {\r\n    setState({ ...state, language: event.target.id })\r\n    dispatch({type: 'SET_TEXT_LANGUAGE', payload: event.target.id})\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        id=\"demo-customized-button\"\r\n        aria-controls=\"demo-customized-menu\"\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? 'true' : undefined}\r\n        variant=\"contained\"\r\n        disableElevation\r\n        onClick={handleClick}  \r\n        sx={{ width: '2vw', height:30, padding: 0}}\r\n      >\r\n          \r\n        <h2 className=\"tryout\" style={{fontSize: '12px'}}>{state.language}</h2> \r\n        </Button>\r\n      <StyledMenu\r\n        id=\"demo-customized-menu\"\r\n        MenuListProps={{\r\n          'aria-labelledby': 'demo-customized-button',\r\n        }}\r\n        anchorEl={anchorEl}\r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n          {textLanguages.map((language : string, index) =>\r\n            <MenuItem id = {language} onClick={handleClickItem} disableRipple>\r\n                {language}\r\n            </MenuItem>\r\n          )}          \r\n      </StyledMenu>\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport List from '@mui/material/List';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport MicIcon from '@mui/icons-material/Mic';\r\nimport ArchitectureIcon from '@mui/icons-material/Architecture';\r\nimport EqualizerIcon from '@mui/icons-material/Equalizer';\r\nimport ExpandLess from '@mui/icons-material/ExpandLess';\r\nimport Listening from './STT/listening'\r\nimport ExpandMore from '@mui/icons-material/ExpandMore';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport TextSize from './display/textSize'\r\nimport SpeechLanguage from './STT/speechLanguage'\r\nimport TextLanguage from './STT/textLanguage'\r\n\r\n\r\n/* todo:\r\n      create listItem shell so that we can simply run a loop to render all of them\r\n      this should help readability and also make adding ListItems in the future easier\r\n*/\r\nexport default function STT(props) {\r\n  const [state, setState] = React.useState({\r\n    display: true,\r\n    stt: true,\r\n    visualization: true,\r\n  });\r\n\r\n  const toggleDrawer =\r\n    (head: string) =>\r\n      (event: React.KeyboardEvent | React.MouseEvent) => {\r\n        setState({ ...state, [head]: !state[head] })\r\n      }\r\n  return (\r\n    <div>\r\n      <h3>Menu</h3>\r\n      <List\r\n        sx={{ width: '20vw', bgcolor: 'background.paper' }}\r\n        component=\"nav\"\r\n        aria-labelledby=\"nested-list-subheader\"\r\n      >\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <MicIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Speech To Text\" />\r\n          <IconButton onClick={toggleDrawer(\"stt\")} >\r\n            {state.stt ? <ExpandLess /> : <ExpandMore />}\r\n          </IconButton>\r\n        </ListItem>\r\n        <Collapse in={state.stt} timeout=\"auto\" unmountOnExit>\r\n          <List component=\"div\" disablePadding>\r\n            <ListItem sx={{ pl: 4, mb: 1}}>\r\n              <ListItemText primary=\"Listening\" />\r\n              <Listening isRecording = {props.isRecording}/>\r\n            </ListItem>\r\n            <ListItem sx={{ pl: 4, mb: 1}}>\r\n              <ListItemText primary=\"Speech Language\" />\r\n              <SpeechLanguage/>\r\n            </ListItem>\r\n            <ListItem sx={{ pl: 4, mb: 2 }}>\r\n              <ListItemText primary=\"Text Language\" />\r\n              <TextLanguage/>\r\n            </ListItem>\r\n          </List>\r\n        </Collapse>\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <ArchitectureIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Display\" />\r\n          <IconButton onClick={toggleDrawer(\"display\")} >\r\n            {state.display ? <ExpandLess /> : <ExpandMore />}\r\n          </IconButton>\r\n        </ListItem>\r\n        <Collapse in={state.display} timeout=\"auto\" unmountOnExit>\r\n          <List component=\"div\" disablePadding>\r\n            <ListItem sx={{ pl: 4}}>\r\n              <ListItemText primary=\"Textsize\" />\r\n            </ListItem>\r\n            <TextSize/>\r\n\r\n            <ListItem sx={{ pl: 4, pt: 5}}>\r\n              <ListItemText primary=\"Theme\" />\r\n              <ArchitectureIcon />\r\n\r\n            </ListItem>\r\n          </List>\r\n        </Collapse>\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemIcon>\r\n            <EqualizerIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Audio Visualization\" />\r\n          <IconButton onClick={toggleDrawer(\"visualization\")} >\r\n            {state.visualization ? <ExpandLess /> : <ExpandMore />}\r\n          </IconButton>\r\n        </ListItem>\r\n        <Collapse in={state.visualization} timeout=\"auto\" unmountOnExit>\r\n          <List component=\"div\" disablePadding>\r\n            <ListItem sx={{ pl: 4 }}>\r\n              <ListItemText primary=\"Visualizing\" />\r\n              <Listening isRecording = {props.isRecording}/>\r\n\r\n            </ListItem>\r\n            <ListItem sx={{ pl: 4 }}>\r\n              <ListItemText primary=\"Design\" />\r\n            </ListItem>\r\n          </List>\r\n        </Collapse>\r\n        <Divider />\r\n      </List>\r\n    </div>\r\n  );\r\n}","import * as React from 'react';\r\nimport List from '@mui/material/List';\r\nimport Button from \"@mui/material/Button\";\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport swal from 'sweetalert';\r\nimport { GetAzureRecognition } from './azureRecognition';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport { ApiStatus, AzureStatus, ControlStatus } from '../../../redux/types';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../../store';\r\n\r\n\r\nenum STATUS {\r\n    \"AVAILABLE\",\r\n    \"NULL\",\r\n    \"UNAVAILABLE\",\r\n    \"INPROGRESS\",\r\n    \"ERROR\"\r\n}\r\n\r\nexport default function AzureDropdown(props) {\r\n    const dispatch = useDispatch()\r\n    const { pog, test } = GetAzureRecognition();\r\n\r\n    const [state, setState] = React.useState({\r\n        openAzure: false,\r\n        azureStatus: useSelector((state: RootState) => {\r\n            return state.AzureReducer as AzureStatus;\r\n        }),\r\n        controlStatus: useSelector((state: RootState) => {\r\n            return state.ControlReducer as ControlStatus;\r\n        }),\r\n        apiStatus: props.apiStatus as ApiStatus\r\n    });\r\n    const handleChangeKey = (event) =>\r\n     {\r\n            let copyStatus = Object.assign({}, state.azureStatus);\r\n            copyStatus[event.target.id] = event.target.value;\r\n            setState({\r\n                ...state, \r\n                azureStatus: copyStatus});\r\n            dispatch({type: 'CHANGE_AZURE_LOGIN', payload: copyStatus})\r\n            \r\n    } \r\n\r\n    const toggleEnter = async () => {\r\n        dispatch({type: 'FLIP_RECORDING', payload: state.controlStatus})\r\n          const recognizedMessage = await test(state.controlStatus, state.azureStatus).then(response => {  \r\n            let copyStatus = Object.assign({}, state.apiStatus);\r\n            if (response === true) {\r\n              copyStatus.azureStatus = 0;\r\n              localStorage.setItem(\"azureStatus\", JSON.stringify(state.azureStatus))\r\n              swal({\r\n                title: \"Success!\",\r\n                text: \"Switching to Microsoft Azure\",\r\n                icon: \"success\", \r\n                timer: 1500,\r\n                buttons: {\r\n                  no: {\r\n                    text: \"Cancel\",\r\n                    value: \"no\",\r\n                  },    \r\n                },\r\n              })\r\n              .then((value) => {\r\n                switch (value) {\r\n                  case \"no\":\r\n                    setState({ ...state, openAzure: false })\r\n                    break;\r\n                  default:\r\n                    copyStatus.currentAPI = 1;\r\n                    dispatch({type: 'CHANGE_API_STATUS', payload: copyStatus})\r\n                }\r\n              });\r\n              setState({\r\n                ...state, \r\n                apiStatus: copyStatus});\r\n            } else {\r\n              copyStatus.azureStatus = 2;   \r\n              swal({\r\n                title: \"Warning!\",\r\n                text: \"Wrong key or region!\",\r\n                icon: \"warning\",\r\n              })\r\n              setState({\r\n                ...state, \r\n                apiStatus: copyStatus});     \r\n            }\r\n\r\n            dispatch({type: 'CHANGE_API_STATUS', payload: copyStatus})\r\n    \r\n          }\r\n        );  \r\n        dispatch({type: 'FLIP_RECORDING', payload: state.controlStatus})\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n                <List component=\"div\" disablePadding>\r\n                    <ListItem sx={{ pl: 4 }}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { pr: '1vw', width: '15vw' },\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        ><TextField onChange={handleChangeKey} value={state.azureStatus.azureKey} id=\"azureKey\" label=\"Key\" variant=\"outlined\" /></Box>\r\n                    </ListItem>\r\n                    <ListItem sx={{ pl: 4 }}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { mr: '1vw', width: '15vw' },\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        ><TextField onChange={handleChangeKey} value={state.azureStatus.azureRegion} id=\"azureRegion\" label=\"Region\" variant=\"outlined\" /></Box>\r\n                    </ListItem>\r\n                    <Button sx={{ pl: 4 }}>\r\n                        <ListItemText primary=\"Enter\" onClick={toggleEnter}/>\r\n                    </Button>\r\n                </List>\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport List from '@mui/material/List';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport Button from \"@mui/material/Button\";\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ErrorIcon from '@mui/icons-material/Error';\r\nimport swal from 'sweetalert';\r\nimport { ApiStatus, RootState} from '../../redux/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ExpandLess from '@mui/icons-material/ExpandLess';\r\nimport ExpandMore from '@mui/icons-material/ExpandMore';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport DoNotDisturbOnIcon from '@mui/icons-material/DoNotDisturbOn';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport AzureDropdown from './azure/AzureDropdown';\r\n\r\nenum STATUS {\r\n    \"AVAILABLE\",\r\n    \"NULL\",\r\n    \"UNAVAILABLE\",\r\n    \"INPROGRESS\",\r\n    \"ERROR\"\r\n}\r\n\r\nconst currTheme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff',\r\n        },\r\n        success: {\r\n            main: '#4caf50'\r\n        },\r\n        warning: {\r\n            main: '#f44336'\r\n        }, \r\n        error: {\r\n            main: '#C8C224'\r\n        }\r\n    }\r\n});\r\nconst IconStatus = (currentAPI: any) => {\r\n    const myTheme = currTheme;\r\n    switch (currentAPI.currentAPI) {\r\n        case STATUS.NULL:\r\n            return(\r\n                <ThemeProvider theme={myTheme}>\r\n                    <DoNotDisturbOnIcon/>\r\n                </ThemeProvider>\r\n            )\r\n        \r\n        case STATUS.AVAILABLE:\r\n            return(\r\n                <ThemeProvider theme={myTheme}>\r\n                    <CheckCircleIcon color=\"success\" />\r\n                </ThemeProvider>\r\n            )       \r\n        case STATUS.UNAVAILABLE:\r\n            return (\r\n                <ThemeProvider theme={myTheme}>\r\n                    <CancelIcon color=\"warning\"/>\r\n                </ThemeProvider>\r\n            )\r\n        }\r\n        return (\r\n            <ThemeProvider theme={myTheme}>\r\n                <ErrorIcon color=\"error\"/>\r\n            </ThemeProvider>\r\n        )\r\n}\r\nexport default function STT(props) {\r\n    const dispatch = useDispatch()\r\n    const myTheme = currTheme\r\n    const [state, setState] = React.useState({\r\n        azureStatus: false,\r\n        streamTextStatus: false,\r\n        webspeechStatus: false,\r\n        apiStatus: useSelector((state: RootState) => {\r\n            return state.APIStatusReducer as ApiStatus;\r\n        })\r\n    });\r\n    const toggleDrawer =\r\n        (apiStat: string, api:number, isArrow:boolean) =>\r\n            (event: React.KeyboardEvent | React.MouseEvent) => {\r\n                if (state.apiStatus.currentAPI !== api) {\r\n                    if (!isArrow && state.apiStatus[apiStat] === 0) {\r\n                        let apiName = \"Webspeech\";\r\n                        if (api == 1) {\r\n                            apiName = \"Microsoft Azure\"\r\n                        } else if (api == 2) {\r\n                            apiName = \"Streamtext\"\r\n                        }\r\n                        swal({\r\n                            title: \"Success!\",\r\n                            text: \"Switching to \" + apiName,\r\n                            icon: \"success\", \r\n                            timer: 2500,\r\n                        \r\n                          })\r\n                        let copyStatus = Object.assign({}, state.apiStatus);\r\n                        copyStatus.currentAPI = api\r\n                        setState({ ...state, apiStatus: copyStatus })\r\n                        dispatch({type: 'CHANGE_API_STATUS', payload: copyStatus})\r\n                    } else {\r\n                        setState({ ...state, [apiStat]: !state[apiStat] })\r\n                    }\r\n                } else if (isArrow) {\r\n                    setState({ ...state, [apiStat]: !state[apiStat] })\r\n                }\r\n            }\r\n    return (\r\n        <div>\r\n            <ListItemButton onClick={toggleDrawer(\"webspeechStatus\", 0, false)}>\r\n                <ThemeProvider theme={myTheme}>\r\n                    <ListItemIcon>\r\n                        <IconStatus{...{currentAPI: state.apiStatus.webspeechStatus}}/>\r\n                    </ListItemIcon>\r\n                </ThemeProvider>\r\n                <ListItemText primary=\"Webspeech\" />\r\n            </ListItemButton>\r\n\r\n            <ListItemButton onClick={toggleDrawer(\"azureStatus\", 1, false)} >\r\n            <ListItemIcon>\r\n                    <IconStatus{...{currentAPI: state.apiStatus.azureStatus}}/>\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Microsoft Azure\" />\r\n                <IconButton onClick={toggleDrawer(\"azureStatus\", 1, true)}>\r\n            {state.streamTextStatus ? <ExpandLess /> : <ExpandMore />}\r\n          </IconButton>\r\n            </ListItemButton>\r\n\r\n            <Collapse in={state.azureStatus} timeout=\"auto\" unmountOnExit>\r\n                <AzureDropdown apiStatus={state.apiStatus}/>\r\n            </Collapse>\r\n\r\n            <ListItemButton onClick={toggleDrawer(\"streamTextStatus\", 2, false)} >\r\n                <ListItemIcon>\r\n                    <IconStatus{...{currentAPI: state.apiStatus.streamtextStatus}}/>\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"StreamText\" />\r\n                <IconButton>\r\n            {state.streamTextStatus ? <ExpandLess /> : <ExpandMore />}\r\n          </IconButton>\r\n            </ListItemButton>\r\n            <Collapse in={state.streamTextStatus} timeout=\"auto\" unmountOnExit>\r\n                <List component=\"div\" disablePadding>\r\n                    <ListItem sx={{ pl: 4 }}>\r\n                        <Box\r\n                            component=\"form\"\r\n                            sx={{\r\n                                '& > :not(style)': { mr: '1vw', width: '15vw' },\r\n                            }}\r\n                            noValidate\r\n                            autoComplete=\"off\"\r\n                        ><TextField id=\"outlined-basic\" label=\"Key\" variant=\"outlined\" /></Box>\r\n                    </ListItem>\r\n                    <Button sx={{ pl: 4 }}>\r\n                        <ListItemText primary=\"Enter\" />\r\n                    </Button>\r\n                </List>\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { ControlStatus, AzureStatus, ApiStatus } from '../../../redux/types';\r\nimport * as speechSDK from 'microsoft-cognitiveservices-speech-sdk'\r\nexport const GetAzureRecognition = () => {\r\n    const pog = \"hi\"\r\n    const test = useCallback(\r\n        async (control: ControlStatus, azureStatus: AzureStatus) => new Promise((resolve, reject) => {\r\n            let azureSpeech = speechSDK.SpeechTranslationConfig.fromSubscription(azureStatus.azureKey, azureStatus.azureRegion)\r\n            azureSpeech.speechRecognitionLanguage = control.speechLanguage;\r\n            azureSpeech.addTargetLanguage(control.textLanguage)\r\n            let azureAudioConfig = speechSDK.AudioConfig.fromDefaultMicrophoneInput();\r\n            let reco = new speechSDK.TranslationRecognizer(azureSpeech, azureAudioConfig);\r\n            reco.canceled = () => {\r\n                resolve(false);  \r\n            }\r\n            reco.sessionStarted = () => {\r\n                resolve(true);  \r\n            }\r\n            reco.recognizeOnceAsync();\r\n        }),\r\n        [pog]\r\n    )\r\n    return useMemo(() => ({ pog, test }), [pog]);\r\n};\r\n\r\nexport const AzureRecognition = () => {\r\n  var transcript=\"\"\r\n  const [azureTranscripts, setTranscripts] = React.useState<string[]>([]);\r\n  const azureListen = useCallback(\r\n    async (transcriptsFull: string, control: React.MutableRefObject<ControlStatus>, azureStatus: React.MutableRefObject<AzureStatus>, currentAPI: React.MutableRefObject<ApiStatus>) =>\r\n      new Promise((resolve, reject) => {\r\n        var lastStartedAt = new Date().getTime();\r\n        let textLanguage = control.current.textLanguage\r\n        let azureSpeech = speechSDK.SpeechTranslationConfig.fromSubscription(azureStatus.current.azureKey, azureStatus.current.azureRegion)\r\n        azureSpeech.speechRecognitionLanguage = control.current.speechLanguage;\r\n        azureSpeech.addTargetLanguage(control.current.textLanguage)\r\n        azureSpeech.setProfanity(2);\r\n        let azureAudioConfig = speechSDK.AudioConfig.fromDefaultMicrophoneInput();\r\n        let speechRecognition = new speechSDK.TranslationRecognizer(azureSpeech, azureAudioConfig);\r\n        let lastRecognized = \"\"\r\n        speechRecognition.startContinuousRecognitionAsync();\r\n        speechRecognition.recognizing= (s, e) => {\r\n\r\n          if (control.current.listening == false || currentAPI.current.currentAPI != 1) {\r\n            speechRecognition.stopContinuousRecognitionAsync()\r\n            resolve(transcriptsFull);   \r\n          } else {\r\n            transcript = lastRecognized + e.result.translations.get(textLanguage);  \r\n            setTranscripts([...azureTranscripts, transcript]);\r\n            transcriptsFull = transcript\r\n          }\r\n        };\r\n        speechRecognition.recognized= (s, e) => {\r\n\r\n            if (control.current.listening == false  || currentAPI.current.currentAPI != 1) {\r\n              speechRecognition.stopContinuousRecognitionAsync()\r\n              resolve(transcriptsFull);   \r\n            } else {\r\n            lastRecognized +=  e.result.translations.get(textLanguage) + \" \";\r\n            transcript = lastRecognized\r\n            setTranscripts([...azureTranscripts, transcript]);\r\n            transcriptsFull = transcript\r\n            }\r\n          };\r\n          speechRecognition.sessionStopped = (s, e) => {\r\n            var timeSinceStart = new Date().getTime() - lastStartedAt;\r\n            if (control.current.listening == false || currentAPI.current.currentAPI != 1) {\r\n              resolve(transcriptsFull);   \r\n            } else if (timeSinceStart > 1000) {\r\n              speechRecognition.startContinuousRecognitionAsync()\r\n            }\r\n          }\r\n      }),\r\n    [setTranscripts]\r\n  );\r\n\r\n  return useMemo(() => ({ azureTranscripts, azureListen }), [azureTranscripts]);\r\n};","import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport ApiIcon from '@mui/icons-material/Api';\r\nimport Menu from '@mui/material/Menu';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport StreamTextLogin from '../api/pickApi'\r\n\r\n\r\nexport default function AccountMenu() {\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', textAlign: 'center' }}>\r\n        <Tooltip title=\"API choice\">\r\n          <IconButton onClick={handleClick} size=\"small\" sx={{ ml: 2 }}>\r\n            <ApiIcon sx={{ width: 32, height: 32, color: 'white'}}>M</ApiIcon>\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Box>\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          elevation: 0,\r\n          sx: {\r\n            width: '20vw',\r\n            overflow: 'invisible',\r\n            filter: 'drop-shadow(0px 2px 8px rgba(0,0,0,0.32))',\r\n            mt: 1.5,\r\n            '& .MuiAvatar-root': {\r\n              boxSizing: \"border-box\",\r\n              height: 32,\r\n              ml: -0.5,\r\n              mr: 1,\r\n            },\r\n            '&:before': {\r\n              content: '\"\"',\r\n              display: 'block',\r\n              position: 'absolute',\r\n              top: 0,\r\n              right:'48%',\r\n              width: 10,\r\n              height: 10,\r\n              bgcolor: 'background.paper',\r\n              transform: 'translateY(-50%) rotate(45deg)',\r\n              zIndex: 0,\r\n            },\r\n          },\r\n        }}\r\n        transformOrigin={{ horizontal: 'center', vertical: 'top' }}\r\n        anchorOrigin={{ horizontal: 'center', vertical: 'bottom' }}\r\n      >\r\n        <StreamTextLogin/>\r\n      </Menu>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport SideBar from '../sidebar/sidebar'\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport { ApiStatus, RootState} from '../../redux/types';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport PickApi from './ApiDropdown'\r\nconst currTheme = createTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#ffffff'\r\n        }\r\n    },\r\n});\r\n\r\nexport default function TemporaryDrawer(props) {\r\n    \r\n    const myTheme = currTheme;\r\n    const [state, setState] = React.useState({\r\n        isOpen: false\r\n    });\r\n    const apiStatus = useSelector((state: RootState) => {\r\n        return state.APIStatusReducer as ApiStatus;\r\n    })\r\n    let display = \"Webspeech\"\r\n    if (apiStatus.currentAPI == 1) {\r\n        display = \"Azure\"\r\n    } else if (apiStatus.currentAPI == 2) {\r\n        display = \"StreamText\"\r\n    } else {\r\n        display = \"Webspeech\"\r\n    }\r\n    const toggleDrawer =\r\n        (open: boolean) =>\r\n            (event: React.MouseEvent) => {\r\n                setState({ ...state, isOpen: open });\r\n            };\r\n    return (\r\n        <AppBar position=\"fixed\" style={{height: '10vh'}}>\r\n            <Toolbar>\r\n                <div className=\"d-table-cell tar\">\r\n                    <IconButton\r\n                        onClick={toggleDrawer(true)}\r\n                    >\r\n                        <ThemeProvider theme={myTheme}>\r\n                            <MenuIcon color=\"primary\" />\r\n                        </ThemeProvider>\r\n                    </IconButton>\r\n                    <Drawer\r\n                        open={state.isOpen}\r\n                        onClose={toggleDrawer(false)}\r\n                    >\r\n                        <SideBar isRecording={props.isRecording}/>\r\n                    </Drawer>\r\n                </div>\r\n                <div className=\"border d-table w-100\">\r\n                    <h2 className=\"d-table-cell tar2\">ScribeAR</h2>\r\n                </div>\r\n                <div  style ={{position: 'fixed', right: '7vw'}}>\r\n                <PickApi />\r\n                </div>\r\n                <h3 style ={{position: 'fixed', right: '10vw'}}> {display} </h3>\r\n\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}","import * as React from 'react';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { ControlStatus, ApiStatus } from '../../../redux/types';\r\n\r\nexport const getSpeechRecognition = () => {\r\n  if (!window || !(window as any).webkitSpeechRecognition) {\r\n    throw new Error('Your browser does not support web speech recognition');\r\n  }\r\n  const speechRecognition = new (window as any).webkitSpeechRecognition();\r\n  speechRecognition.continuous = true;\r\n  speechRecognition.interimResults = true;\r\n  return speechRecognition as SpeechRecognition;\r\n};\r\n\r\nexport const useRecognition = () => {\r\n  var transcript=\"\"\r\n  var finalTranscript=\"\"\r\n  const [transcripts, setTranscripts] = React.useState<string[]>([]);\r\n  const listen = useCallback(\r\n    async (transcriptsFull: string, control: React.MutableRefObject<ControlStatus>,  currentAPI: React.MutableRefObject<ApiStatus>) =>\r\n      new Promise((resolve, reject) => {\r\n        \r\n        var lastStartedAt = new Date().getTime();\r\n\r\n        const speechRecognition = getSpeechRecognition();\r\n        speechRecognition.onresult = (event: SpeechRecognitionEvent) => {\r\n          if (control.current.listening == false || currentAPI.current.currentAPI != 0) {\r\n              speechRecognition.stop()\r\n              resolve(transcriptsFull);   \r\n          } else {\r\n          const finalResult = Array.from(event.results)\r\n          .map(result => result[0])\r\n          .map(result => result.transcript)\r\n          .join('');\r\n          if (finalResult) {\r\n            transcript = finalTranscript + finalResult;\r\n          }    \r\n          setTranscripts([...transcripts, transcript]);\r\n\r\n          transcriptsFull = transcript\r\n        }\r\n        };\r\n  \r\n        speechRecognition.onend = () => { \r\n          var timeSinceStart = new Date().getTime() - lastStartedAt;\r\n          if (control.current.listening && currentAPI.current.currentAPI === 0) {\r\n            finalTranscript = transcript + \" \";\r\n            if (timeSinceStart > 1000) {\r\n\r\n            speechRecognition.start()\r\n            }\r\n          } else {\r\n            resolve(transcriptsFull);   \r\n          }\r\n        \r\n        }\r\n         speechRecognition.start();\r\n      }),\r\n    [setTranscripts]\r\n  );\r\n\r\n  return useMemo(() => ({ transcripts, listen }), [transcripts]);\r\n};","import * as React from 'react';\r\nimport { useRecognition, getSpeechRecognition} from './webspeech/recognition';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Swal from 'sweetalert2';\r\nimport { RootState } from '../../store';\r\nimport { AzureRecognition } from './azure/azureRecognition';\r\nimport { DisplayStatus,  AzureStatus, ControlStatus, ApiStatus } from '../../redux/types'\r\n\r\nvar transcriptsFull = \"testing\"\r\nlet desiredAPI = 0;\r\n\r\nexport const WebRecognitionExample: React.FC = (props) => {\r\n  const dispatch = useDispatch()\r\nconst control = useSelector((state: RootState) => {\r\n  return state.ControlReducer as ControlStatus;\r\n});\r\nconst textSize = useSelector((state: RootState) => {\r\n  return state.DisplayReducer as DisplayStatus;\r\n});\r\nconst azureStatus = useSelector((state: RootState) => {\r\n  return state.AzureReducer as AzureStatus\r\n})\r\nconst apiStatus = useSelector((state: RootState) => {\r\n  return state.APIStatusReducer as ApiStatus\r\n})\r\nReact.useEffect(() => {\r\n  if (control.listening == true) {\r\n    if (apiStatus.currentAPI == 0) {\r\n      desiredAPI = 0\r\n      webspeechHandler()\r\n    } else if (apiStatus.currentAPI == 1) {\r\n      desiredAPI = 1\r\n      azureHandler()\r\n    }\r\n  } \r\n}, [control.listening, apiStatus.currentAPI]);\r\ndocument.addEventListener(\"DOMContentLoaded\", function(){\r\n  if (apiStatus.currentAPI == 1) {\r\n  Swal.fire({\r\n    title: 'It appears you have a valid Microsoft Azure key, would you like to use Microsoft Azure?',\r\n    icon: 'info',\r\n    allowOutsideClick: false,\r\n    showDenyButton: true,\r\n    confirmButtonText: 'Yes!',\r\n  }).then((result) => {\r\n    /* Read more about isConfirmed, isDenied below */\r\n    if (result.isConfirmed) {\r\n      Swal.fire('Switching to Azure', '', 'success')\r\n      desiredAPI = 1\r\n      azureHandler()\r\n    } else {\r\n      let copyStatus = Object.assign({}, apiStatus);\r\n      copyStatus.currentAPI = 0\r\n      dispatch({type: 'CHANGE_API_STATUS', payload: copyStatus})\r\n      webspeechHandler()\r\n    }\r\n  })\r\n  } \r\n});\r\nconst textSizeA = \"\" + textSize.textSize + \"vh\"\r\nconst { azureTranscripts, azureListen } = AzureRecognition();\r\nconst { transcripts, listen } = useRecognition();\r\n\r\nconst stateRefControl = React.useRef(control)\r\nconst stateRefAzure = React.useRef(azureStatus)\r\nconst stateCurrentAPI = React.useRef(apiStatus)\r\nstateRefControl.current = control\r\nstateRefAzure.current = azureStatus\r\nstateCurrentAPI.current = apiStatus\r\n  const webspeechHandler = async () => {\r\n    const recognizedMessage = await listen(transcriptsFull, stateRefControl, stateCurrentAPI).then(response => {  \r\n      if (stateRefControl.current.listening && stateCurrentAPI.current.currentAPI == 0) {\r\n          transcriptsFull = transcriptsFull + response\r\n          webspeechHandler()\r\n        }\r\n      }\r\n    );\r\n  };\r\n  const azureHandler = async () => {\r\n    const recognizedMessage = await azureListen(transcriptsFull, stateRefControl, stateRefAzure, stateCurrentAPI).then(response => {  \r\n      if (stateRefControl.current.listening && stateCurrentAPI.current.currentAPI == 1) {\r\n          transcriptsFull = transcriptsFull + response\r\n          azureHandler()\r\n        }\r\n      }\r\n    );\r\n  };\r\n  let fullTranscripts;\r\n  if (desiredAPI == 0) {\r\n    fullTranscripts = transcripts\r\n  } else {\r\n    fullTranscripts = azureTranscripts\r\n  }\r\n  const capts = document.getElementById('captionsSpace')\r\n  if (capts != null) {\r\n  var isScrolledToBottom = capts.scrollHeight - capts.clientHeight <= capts.scrollTop + 1\r\n  if (isScrolledToBottom)\r\n      capts.scrollTop = capts.scrollHeight - capts.clientHeight // scroll to bottom\r\n  }\r\n  return (\r\n    <div>      \r\n      <ul >\r\n        {fullTranscripts.map(transcript => (\r\n          <h3  id = \"captionsSpace\" style ={{position: 'fixed', width: '90%', textAlign: 'left', left: '0', fontSize: textSizeA, paddingLeft: '5%', paddingRight: '60%', overflowY: 'scroll', height: '40%'}}>{transcript}</h3>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};","import './Desktop.css';\r\nimport AppBar from '../../components/topbar/topbar'\r\nimport { RootState } from '../../redux/types';\r\nimport { WebRecognitionExample } from '../../components/api/recogComponent';\r\nimport { Provider, useDispatch, useSelector} from 'react-redux';\r\nimport { store } from '../../store';\r\n\r\n/* todo:\r\n      mui theme file which has every theme and is sent to every styled function\r\n      this will help readability and make custom themes way easier to implement\r\n*/\r\nexport default function Desktop(props) {\r\n   \r\n   const isRecording = useSelector((state: RootState) => {\r\n      return state;\r\n   });   \r\n\r\n   console.log(isRecording)\r\n   const dispatch = useDispatch()\r\n   return (\r\n     <div>\r\n        <AppBar isRecording={isRecording}/>\r\n        <WebRecognitionExample/>\r\n     </div>\r\n   )\r\n  }\r\n\r\n","import Desktop from './mode/desktop/Desktop';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Desktop/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { type } from \"os\";\r\nimport { DisplayStatus } from \"../types\";\r\nenum COLOR {\r\n  \"BLACK\",\r\n  \"WHITE\",\r\n}\r\n\r\nconst  initialState : DisplayStatus = {\r\n  textSize: 6,\r\n  color: COLOR.BLACK,\r\n}\r\n\r\n\r\nconst saveLocally = (varName: string, value: any) => {\r\n  localStorage.setItem(varName, JSON.stringify(value))\r\n}\r\n\r\nconst getLocalState = (name: string) => {\r\n  let checkNull = localStorage.getItem(name)\r\n  if (checkNull) {\r\n    return JSON.parse(checkNull);\r\n  } else {\r\n    return initialState\r\n  }\r\n};\r\n\r\nexport const DisplayReducer = (state = getLocalState(\"displayReducer\"), action) => {\r\n  switch (action.type) {\r\n    case 'PICK_BLACK':\r\n      state.color = 0;\r\n      return state.color;\r\n    case 'PICK_WHITE':\r\n      state.color = 1;\r\n      return state.color;\r\n    case 'SET_TEXT':\r\n      saveLocally(\"displayReducer\", action.payload)\r\n      return { ...state, ...action.payload};\r\n\r\n      // return {\r\n      //   ...state,\r\n      //   textSize: action.payload,};\r\n    default:\r\n      return state;\r\n  }\r\n}","import { ApiStatus, AzureStatus, StreamtextStatus } from \"../types\";\r\nenum APIS {\r\n    \"WEBSPEECH\",\r\n    \"AZURE\",\r\n    \"STREAMTEXT\"\r\n}\r\nenum STATUS {\r\n    \"AVAILABLE\",\r\n    \"NULL\",\r\n    \"UNAVAILABLE\",\r\n    \"INPROGRESS\",\r\n    \"ERROR\"\r\n}\r\n\r\n\r\nconst initialAPIStatusState : ApiStatus = {\r\n    currentAPI: APIS.WEBSPEECH,\r\n    webspeechStatus: STATUS.AVAILABLE,\r\n    azureStatus: STATUS.NULL,\r\n    streamtextStatus: STATUS.NULL,\r\n}\r\n\r\nconst initialAzureState : AzureStatus = {\r\n    azureKey: \"NULL\",\r\n    azureRegion: \"NULL\",\r\n}\r\n\r\nconst initialStreamtextState : StreamtextStatus = {\r\n    key: \"NULL\"\r\n}\r\n\r\nconst saveLocally = (varName: string, value: any) => {\r\n    localStorage.setItem(varName, JSON.stringify(value))\r\n}\r\n\r\nconst getLocalState = (name: string) => {\r\n    let checkNull = localStorage.getItem(name)\r\n    if (checkNull) {\r\n      return JSON.parse(checkNull);\r\n    } else {\r\n      if (name == \"apiStatus\") {\r\n        return initialAPIStatusState\r\n      } else if (name == \"azureStatus\") {\r\n        return initialAzureState\r\n      }\r\n    }\r\n  };\r\n\r\nexport const APIStatusReducer = (state = getLocalState(\"apiStatus\"), action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE_CURRENT_API':\r\n          return { ...state, ...action.payload};\r\n        case 'CHANGE_API_STATUS':\r\n          if (action.payload.azureStatus == 0 || action.payload.currentAPI !== state.currentAPI) {\r\n            saveLocally(\"apiStatus\", action.payload)\r\n          }\r\n          \r\n\r\n          return { ...state, ...action.payload};\r\n        default:\r\n          return state;\r\n      }\r\n}\r\n\r\nexport const AzureReducer = (state = getLocalState(\"azureStatus\"), action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE_AZURE_LOGIN':\r\n            return {...state, ...action.payload};\r\n        case 'CHANGE_AZURE_STATUS':\r\n            return {...state, ...action.payload};\r\n        default:\r\n          return state;\r\n      }\r\n}\r\nexport const StreamtextReducer = (state = initialStreamtextState, action) => {\r\n    switch (action.type) {\r\n        case 'FLIP_RECORDING':\r\n          return !state\r\n        default:\r\n          return state;\r\n      }\r\n}\r\n\r\n\r\n\r\n\r\n","import { ControlStatus } from \"../types\";\r\n\r\nconst initialControlState : ControlStatus = {\r\n    listening: true,\r\n    speechLanguage: \"en-US\",\r\n    textLanguage: \"en\"\r\n}\r\n\r\nexport function ControlReducer(state = initialControlState, action) {\r\n  switch (action.type) {\r\n    case 'FLIP_RECORDING':\r\n      return { ...state, ...action.payload};\r\n    case 'SET_SPEECH_LANGUAGE':\r\n        return {\r\n          ...state,\r\n          speechLanguage: action.payload};\r\n    case 'SET_TEXT_LANGUAGE':\r\n        return {\r\n          ...state,\r\n        speechLanguage: action.payload};\r\n    default:\r\n      return state;\r\n  }\r\n}","import {DisplayReducer} from './redux/reducers/displayReducers'\r\nimport {APIStatusReducer, AzureReducer, StreamtextReducer} from './redux/reducers/apiReducers'\r\nimport {ControlReducer} from './redux/reducers/controlReducers'\r\n\r\nimport { combineReducers, createStore } from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n  DisplayReducer,\r\n  APIStatusReducer,\r\n  AzureReducer,\r\n  StreamtextReducer,\r\n  ControlReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {store} from './store';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n        <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}