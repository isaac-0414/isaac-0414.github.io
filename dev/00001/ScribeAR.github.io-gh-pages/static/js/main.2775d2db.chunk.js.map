{"version":3,"sources":["components/TopSpace/Options/OnOff/index.js","components/TopSpace/Options/PlusMinus/index.js","redux/actions.js","components/TopSpace/Options/Record/index.js","components/TopSpace/Options/Slider/index.js","components/TopSpace/Options/index.js","components/TopSpace/index.js","components/Captions/Recognition/index.js","components/Captions/index.js","serviceWorker.js","redux/reducers.js","index.js","App.js"],"names":["OnOff","props","dispatch","useDispatch","item","className","type","onChange","action","PlusMinus","setting","useSelector","onClick","decrement","increment","increment_textSize","decrement_textSize","increment_lineWidth","decrement_lineWidth","increment_numLines","decrement_numLines","flip_invertColors","flip_recording","Record","state","recording","document","body","onkeyup","e","keyCode","Slider","Options","id","textSize","lineWidth","numLines","invertColors","TopSpace","shown","timeoutId","setTimeout","hide","bind","show","resetTimeout","this","setState","getElementById","addEventListener","removeEventListener","clearTimeout","toId","style","height","React","Component","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","Recognition","line","appendLine","start","stop","prevProps","prevState","isRecording","onresult","words","Array","from","results","map","result","transcript","join","charAt","toUpperCase","slice","isFinal","updateCurrentLine","onend","str","capts","isScrolledToBottom","scrollHeight","clientHeight","scrollTop","out","div","createElement","textContent","appendChild","PureComponent","Captions","paddingString","h","sz","wid","innerHeight","innerWidth","fontSize","width","paddingLeft","paddingRight","Boolean","location","hostname","match","allReducers","combineReducers","Math","max","min","lockScreen","store","createStore","ReactDOM","render","getComputedStyle","documentElement","getPropertyValue","sizeString","botHeight","topHeight","backgroundColor","color","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2775d2db.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.css'\r\nimport { /*useSelector, */useDispatch } from 'react-redux'\r\n\r\n// This code only works if the initial state is Off. It's surprisingly way harder\r\n// to get this to work if you want the inital state of the checkbox to be checked.\r\n\r\nexport default function OnOff(props) {\r\n     //const setting = useSelector(props.setting)\r\n     // useDispatch returns the state modifying function, invoked below.\r\n     const dispatch = useDispatch()\r\n\r\n     return (\r\n          <div>\r\n               {props.item}\r\n               <label className=\"switch\">\r\n                    <input type=\"checkbox\" onChange={() => dispatch(props.action())}></input>\r\n                    <span className=\"slider\"></span>\r\n               </label>\r\n          </div>\r\n     )\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nexport default function PlusMinus(props) {\r\n     const setting = useSelector(props.setting) // Get current value of the setting.\r\n     // useDispatch returns the state modifying function, invoked below.\r\n     const dispatch = useDispatch()\r\n     return (\r\n          <div>\r\n               {props.item}\r\n               <div className=\"setting-wrapper\">\r\n                    <button className=\"minus\"\r\n                      onClick={() => dispatch(props.decrement())}>-</button>\r\n                    <div className=\"setting\">{setting}</div>\r\n                    <button className=\"plus\"\r\n                      onClick={() => dispatch(props.increment())}>+</button>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","// Actions are the functions that we call throughout the project to change global state.\r\n\r\nexport const set_screenWidth = (width) => {\r\n     return {\r\n          type: 'SET_SCREENWIDTH',\r\n          value: width\r\n     };\r\n}\r\n\r\nexport const set_screenHeight = (height) => {\r\n     return {\r\n          type: 'SET_SCREENHEIGHT',\r\n          value: height\r\n     };\r\n}\r\n\r\nexport const increment_textSize = () => {\r\n     return { type: 'INCREMENT_TEXTSIZE' };\r\n}\r\n\r\nexport const decrement_textSize = () => {\r\n     return { type: 'DECREMENT_TEXTSIZE' };\r\n}\r\n\r\nexport const increment_lineWidth = () => {\r\n     return { type: 'INCREMENT_LINEWIDTH' };\r\n}\r\n\r\nexport const decrement_lineWidth = () => {\r\n     return { type: 'DECREMENT_LINEWIDTH' };\r\n}\r\n\r\nexport const increment_numLines = () => {\r\n     return { type: 'INCREMENT_NUMLINES' };\r\n}\r\n\r\nexport const decrement_numLines = () => {\r\n     return { type: 'DECREMENT_NUMLINES' };\r\n}\r\n\r\nexport const flip_lockScreen = () => {\r\n     return { type: 'FLIP_LOCKSCREEN' };\r\n}\r\n\r\nexport const flip_invertColors = () => {\r\n     return { type: 'FLIP_INVERTCOLORS' };\r\n}\r\n\r\nexport const flip_recording = () => {\r\n     return { type: 'FLIP_RECORDING' };\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './index.css'\r\nimport { flip_recording } from '../../../../redux/actions'\r\n\r\nexport default function Record(props) {\r\n     const recording = (state) => state.recording\r\n     const setting = useSelector(recording) // Get current value of recording.\r\n     // useDispatch returns the state modifying function, invoked below.\r\n     const dispatch = useDispatch()\r\n\r\n     // flip recording when space bar is pressed\r\n     document.body.onkeyup = function(e) { // run function when any key is pressed\r\n          if (e.keyCode === 32) // keyCode 32 is the space bar\r\n               dispatch(flip_recording())\r\n     }\r\n     // record-btn-wrapper toggles between the two buttons using the TopSpace\r\n     // hidden/shown CSS.\r\n     return (\r\n          <div>\r\n               {setting ? \"Recording\" : \"Record\"}\r\n               <div className=\"record-btn-wrapper\">\r\n                    <div className={setting ? \"record-btn hidden\" : \"record-btn shown\"}\r\n                         onClick={() => dispatch(flip_recording())} />\r\n                    <div className={setting ? \"stop-btn shown\" : \"stop-btn hidden\"}\r\n                         onClick={() => dispatch(flip_recording())} />\r\n               </div>\r\n          </div>\r\n     )\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n// To do: turn this into a slider. https://www.w3schools.com/howto/howto_js_rangeslider.asp\r\n\r\nexport default function Slider(props) {\r\n     const setting = useSelector(props.setting)\r\n     const dispatch = useDispatch()\r\n     return (\r\n          <div>\r\n               {props.item}\r\n               <div className=\"setting-wrapper\">\r\n                    <button className=\"minus\"\r\n                      onClick={() => dispatch(props.decrement())}>-</button>\r\n                    <div className=\"setting\">{setting}</div>\r\n                    <button className=\"plus\"\r\n                      onClick={() => dispatch(props.increment())}>+</button>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React from 'react'\r\nimport OnOff from './OnOff'\r\nimport PlusMinus from './PlusMinus'\r\nimport Record from './Record'\r\nimport Slider from './Slider'\r\nimport './index.css'\r\nimport {\r\n     flip_invertColors,\r\n     increment_textSize,\r\n     decrement_textSize,\r\n     increment_lineWidth,\r\n     decrement_lineWidth,\r\n     increment_numLines,\r\n     decrement_numLines\r\n} from '../../../redux/actions'\r\n\r\nexport default function Options() {\r\n     // These are functions that take an object and return an element of the object.\r\n     // They are passed to useSelector, which feeds the global state object into them.\r\n     const textSize = (state) => state.textSize\r\n     const lineWidth = (state) => state.lineWidth\r\n     const numLines = (state) => state.numLines\r\n     const invertColors = (state) => state.invertColors\r\n\r\n     return (\r\n          <div className=\"Options\" id=\"options-space\">\r\n               <h1>Options</h1>\r\n               <div className=\"item-wrapper\">\r\n                    <Slider item=\"Text size\" setting={textSize}\r\n                         increment={increment_textSize}\r\n                         decrement={decrement_textSize} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <Slider item=\"Line width\" setting={lineWidth}\r\n                         increment={increment_lineWidth}\r\n                         decrement={decrement_lineWidth} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <PlusMinus item=\"Number of lines\" setting={numLines}\r\n                         increment={increment_numLines}\r\n                         decrement={decrement_numLines} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <OnOff item=\"Invert colors\" setting={invertColors}\r\n                         action={flip_invertColors} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <Record />\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\nimport Options from './Options'\r\n\r\n// JavaScript functions used: setTimeout, clearTimeout, bind, getElementById,\r\n// addEventListener, removeEventListener\r\n// React functions used: constructor, setState, componentDidMount, render\r\nclass TopSpace extends React.Component {\r\n     // When options are shown:\r\n          // Clicking in the optionsSpace triggers show() then resetTimeout().\r\n          // Clicking in the hideSpace triggers hide().\r\n     // When options are not shown:\r\n          // Clicking anywhere in the outer div triggers show().\r\n     // Event listeners enforce these rules in outer and optionsSpace elements.\r\n     // hideSpace uses a simple onClick, which only works when the element is shown.\r\n\r\n     constructor(props) {\r\n          super(props)\r\n          this.state = {\r\n               shown: true, // Whether the options area is shown. Used in JSX.\r\n               // Set 15 second timeout and when it expires, run this.hide.\r\n               // Immediately store the returned id for later use.\r\n               timeoutId: setTimeout(this.hide.bind(this), 15000)\r\n          }\r\n          // Bind functions so we can use the keyword 'this' inside them.\r\n          this.hide = this.hide.bind(this)\r\n          this.show = this.show.bind(this)\r\n          this.resetTimeout = this.resetTimeout.bind(this)\r\n     }\r\n\r\n     hide() { // Hide the options area from view.\r\n          this.setState({ shown: false })\r\n          document.getElementById('outer').addEventListener('click', this.show)\r\n     }\r\n\r\n     show() { // Show the options area. If already shown, just reset timeout.\r\n          this.setState({ shown: true })\r\n          document.getElementById('outer').removeEventListener('click', this.show)\r\n          this.resetTimeout()\r\n     }\r\n\r\n     resetTimeout() { // Reset the 15 second timer for hiding the options.\r\n          clearTimeout(this.state.timeoutId) // Cancel the timeout set earlier.\r\n          var toId = setTimeout(this.hide, 15000) // Set a new 15 second timeout.\r\n          this.setState({timeoutId: toId}) // Store the id of the new timeout.\r\n     }\r\n     // The first time the component mounts, add an event listener to the options\r\n     // space, so whenever it's clicked, it shows.\r\n     componentDidMount() {\r\n          document.getElementById('optionsSpace').addEventListener('click', this.show)\r\n     }\r\n\r\n     render() {\r\n          var h = '64vh'; // I don't remember why I set the height like this.\r\n          // The Options component takes a function as a prop.\r\n          return (\r\n               <div className=\"TopSpace\" id=\"outer\" style={{ height: h }}>\r\n                    <div className={\"Container \" + (this.state.shown ? \"shown\" : \"hidden\")}>\r\n                         <div id=\"optionsSpace\">\r\n                              <Options resetTimeout={this.resetTimeout} />\r\n                         </div>\r\n                         <div id=\"hideSpace\" onClick={this.hide}>Hide</div>\r\n                    </div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default TopSpace;\r\n","import React from 'react'\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\nrecognition.lang = 'en-US'\r\nrecognition.continuous = false\r\nrecognition.interimResults = true\r\n\r\n// In this document, a 'line' is more like a sentence.\r\n// this.state.line is like a buffer of text held at the end of the page. When the line\r\n// is finished, the buffer is flushed: a new div is appended to the 'out' div and\r\n// this.state.line is reset for the next line.\r\n\r\nclass Recognition extends React.PureComponent {\r\n     constructor() {\r\n          super()\r\n          this.state = {\r\n               line: '',\r\n               //recording: true\r\n          }\r\n          this.appendLine = this.appendLine.bind(this)\r\n          this.start = this.start.bind(this)\r\n          this.stop = this.stop.bind(this)\r\n     }\r\n\r\n     componentDidMount() {\r\n          this.start()\r\n     }\r\n\r\n     // Global state 'recording' is passed as a prop. componentDidUpdate is invoked\r\n     // when props change, therefore also when 'recording' changes.\r\n     componentDidUpdate(prevProps, prevState) {\r\n          if (prevProps.isRecording === this.props.isRecording)\r\n               return\r\n          if (this.props.isRecording)\r\n               this.start()\r\n          else this.stop()\r\n     }\r\n\r\n     start() {\r\n          recognition.start()\r\n          // Map the complex recognition result object to a string. You can explore\r\n          // the full object with console.log(e).\r\n          recognition.onresult = (e) => {\r\n               let words = Array.from(e.results)\r\n                 .map(result => result[0])\r\n                 .map(result => result.transcript)\r\n                 .join('');\r\n               words = words.charAt(0).toUpperCase() + words.slice(1)\r\n               if (e.results[0].isFinal) // if line is final\r\n                    this.appendLine(words + '.') // flush buffer\r\n               else this.updateCurrentLine(words) // update state\r\n          }\r\n          // By default, recognition stops when it gets a final result.\r\n          recognition.onend = recognition.start // override this behavior\r\n     }\r\n\r\n     stop() {\r\n          recognition.onresult = () => {} // do nothing with results\r\n          recognition.onend = () => {} // don't restart when ending\r\n          recognition.stop()\r\n     }\r\n\r\n     updateCurrentLine(str) {\r\n          const capts = document.getElementById('captionsSpace')\r\n          var isScrolledToBottom = capts.scrollHeight - capts.clientHeight <= capts.scrollTop + 1\r\n          this.setState({ line: str })\r\n          if (isScrolledToBottom)\r\n               capts.scrollTop = capts.scrollHeight - capts.clientHeight\r\n     }\r\n\r\n     appendLine(str) {\r\n          const capts = document.getElementById('captionsSpace')\r\n          const out = document.getElementById('out')\r\n          var isScrolledToBottom = capts.scrollHeight - capts.clientHeight <= capts.scrollTop + 1\r\n          var div = document.createElement('div') // create new div\r\n          div.textContent = str // set new div's text to the updated current line\r\n          out.appendChild(div) // add the new div to the document inside 'out' element\r\n          this.setState({ line: '' }) // reset line\r\n          if (isScrolledToBottom)\r\n               capts.scrollTop = capts.scrollHeight - capts.clientHeight // scroll to bottom\r\n     }\r\n\r\n     render() {\r\n          // out holds all past lines. curr holds the current line.\r\n          return (\r\n               <div>\r\n                    <div id='out'></div>\r\n                    <div id='curr'>{this.state.line}</div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Recognition\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './index.css'\r\nimport Recognition from './Recognition'\r\n\r\nexport default function Captions(props) {\r\n     const lineWidth = useSelector((state) => state.lineWidth)\r\n     const recording = useSelector((state) => state.recording)\r\n     // Sloppy styling. Please change.\r\n     var paddingString = (11 - lineWidth) * 3 + 'vw'\r\n     var h = props.height\r\n     var sz = props.textSize\r\n     var wid = \"calc(100vh - 2 * \" + paddingString + \")\"\r\n     if(window.innerHeight > window.innerWidth) {\r\n       wid = \"calc(100vw - 2 * \" + paddingString + \")\"\r\n     }\r\n     return ( <div className=\"captionsSpace\" id=\"captionsSpace\"\r\n          style={{\r\n            fontSize: sz,\r\n            height: h,\r\n            width: wid,\r\n            paddingLeft: paddingString,\r\n            paddingRight: paddingString }}>\r\n               <Recognition isRecording={recording} />\r\n          </div> )\r\n}\r\n","// THIS ENTIRE FILE, INCLUDING COMMENTS EXCEPT FOR THIS ONE, IS AUTOMATICALLY PROVIDED BY NPX\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nconst textSizeReducer = (state = 6, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_TEXTSIZE':\r\n               return state + 1;\r\n          case 'DECREMENT_TEXTSIZE':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lineWidthReducer = (state = 10, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_LINEWIDTH':\r\n               return Math.min(10, state + 1)\r\n          case 'DECREMENT_LINEWIDTH':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst numLinesReducer = (state = 3, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_NUMLINES':\r\n               return state + 1;\r\n          case 'DECREMENT_NUMLINES':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lockScreenReducer = (state = false, action) => {\r\n     if (action.type === 'FLIP_LOCKSCREEN')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst invertColorsReducer = (state = false, action) => {\r\n     if (action.type === 'FLIP_INVERTCOLORS')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst recordingReducer = (state = true, action) => {\r\n     if (action.type === 'FLIP_RECORDING')\r\n          return !state\r\n     else return state\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n     textSize: textSizeReducer,\r\n     lineWidth: lineWidthReducer,\r\n     numLines: numLinesReducer,\r\n     lockScreen: lockScreenReducer,\r\n     invertColors: invertColorsReducer,\r\n     recording: recordingReducer\r\n});\r\n\r\nexport default allReducers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport allReducers from './redux/reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n     <Provider store={store}>\n          <App />\n     </Provider>,\n     document.getElementById('root')\n);\n\n// AUTOMATIC COMMENT PROVIDED BY NPX:\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport TopSpace from './components/TopSpace'\nimport Captions from './components/Captions'\nimport './App.css'\n\nexport default function App() {\n     const darkMode = getComputedStyle(document.documentElement).getPropertyValue('--primary'); // #999999\n     // Get global state from Redux. See the React Redux tutorial.\n     const textSize = useSelector((state) => state.textSize)\n     const numLines = useSelector((state) => state.numLines)\n     const invertColors = useSelector((state) => state.invertColors)\n     // Convert variables to CSS-friendly strings.\n     var sizeString = textSize + 'vh'\n     // Size of bottom space (text area) relative to text size and number of lines.\n     // 1.5 is an estimate of the ratio of line size to text size.\n     // This is a sloppy way of calculating the height. Please improve on this.\n     var botHeight = textSize * numLines * 1.5\n     // topHeight + botHeight should always = 100vh because we don't want the full\n     // page to scroll (we only want the individual areas to scroll).\n     var topHeight = 100 - botHeight + 'vh'\n\n     botHeight += 'vh'\n     var bgColor = invertColors ? 'black': 'white'\n     var color = invertColors ? 'white' : 'black'\n     if (bgColor == 'black') {\n       return (\n            <div className=\"App-1\" style={{\n                 backgroundColor: 'black',\n                 color: 'white'\n                }}>\n                 <TopSpace height={topHeight} />\n                 <Captions height={botHeight} textSize={sizeString} />\n            </div>\n       )\n     } else {\n       return (\n            <div className=\"App-2\" style={{\n                 backgroundColor: 'white',\n                 color: 'black'\n                }}>\n                 <TopSpace height={topHeight} />\n                 <Captions height={botHeight} textSize={sizeString} />\n            </div>\n       )\n     }\n     // You can't comment in JSX.\n     // The style tag is the easiest way to set style based on JS variables.\n\n}\n"],"sourceRoot":""}